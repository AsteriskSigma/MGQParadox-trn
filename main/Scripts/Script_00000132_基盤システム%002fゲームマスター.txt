=begin
=基盤システム/ゲームマスター




==更新履歴
  Date     Version Author Comment
==14/12/13 2.0.0   トリス 統合A～E A
==17/05/16 2.0.4   トリス 統合V～W V

=end

#==============================================================================
# ■ BattleManager
#==============================================================================
class << BattleManager
  #--------------------------------------------------------------------------
  # ○ メンバ変数の初期化（def init_members）
  # 他にも追加する物があるのでベース/Moduleで統一
  #--------------------------------------------------------------------------
  #--------------------------------------------------------------------------
  # ○ 次の行動主体の取得
  #    行動順序リストの先頭からバトラーを取得する。
  #    現在パーティにいないアクターを取得した場合（index が nil, バトルイベ
  #    ントでの離脱直後などに発生）は、それをスキップする。
  #--------------------------------------------------------------------------
  def next_subject
    loop do
      battler = @action_game_masters.shift
      break unless battler
      return battler
    end
    loop do
      battler = @action_battlers.shift
      return nil unless battler
      next unless battler.index && battler.alive?
      return battler
    end
  end
  #--------------------------------------------------------------------------
  # ○ 勝敗判定
  #--------------------------------------------------------------------------
  def judge_win_loss
    if @phase && !gm_exist?
      return process_abort   if $game_party.members.empty?
      return process_defeat  if $game_party.all_dead?
      return process_victory if $game_troop.all_dead?
      return process_abort   if aborting?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ● スキル割り込み
  #--------------------------------------------------------------------------
  def skill_interrupt(battler, skill_id, symbol = nil)
    gm = Game_Master.new(battler)
    gm.skill_interrupt(skill_id, symbol)
    @action_game_masters.unshift(gm)
  end
  #--------------------------------------------------------------------------
  # ● ＧＭアクションが存在する？
  #--------------------------------------------------------------------------
  def gm_exist?
    return !@action_game_masters.empty?
  end
end

#==============================================================================
# ■ Game_Battler
#==============================================================================
class Game_Battler < Game_BattlerBase
  #--------------------------------------------------------------------------
  # ○ スキル／アイテムの適用テスト
  #    使用対象が全快しているときの回復禁止などを判定する。
  #--------------------------------------------------------------------------
  def item_test(user, item)
    return false if (item.for_dead_friend? != dead?) && !(user.game_master? && item.for_user?)
    return true if $game_party.in_battle
    return true if item.for_opponent?
    return true if item.damage.recover? && item.damage.to_hp? && hp < mhp
    return true if item.damage.recover? && item.damage.to_mp? && mp < mmp
    return true if item_has_any_valid_effects?(user, item)
    return false
  end
  #--------------------------------------------------------------------------
  # ● スキル割り込み
  #--------------------------------------------------------------------------  
  def skill_interrupt(skill_id, symbol = nil)
    action = Game_Action.new(self)
    action.set_skill(skill_id)
    action.set_symbol(symbol)
    @actions.unshift(action)
  end
  #--------------------------------------------------------------------------
  # ● ゲームマスター？
  #--------------------------------------------------------------------------
  def game_master?
    return false
  end
  #--------------------------------------------------------------------------
  # ● ゲームマスターならばオブザーバーを返す
  #--------------------------------------------------------------------------
  def master_observer
    return game_master? ? @observer : self
  end
end

#==============================================================================
# ■ Game_Master
#==============================================================================
class Game_Master < Game_Battler
  attr_reader   :observer
  #--------------------------------------------------------------------------
  # ● オブジェクト初期化
  #--------------------------------------------------------------------------
  def initialize(observer)
    super()
    @observer = observer
    self.hp = mhp
    self.mp = mmp
    self.tp = max_tp
  end
  #--------------------------------------------------------------------------
  # ● 最大HPの取得
  #--------------------------------------------------------------------------
  def mhp
    return 999999
  end
  #--------------------------------------------------------------------------
  # ● 最大MPの取得
  #--------------------------------------------------------------------------
  def mmp
    return 9999
  end
  #--------------------------------------------------------------------------
  # ● 最大TPの取得
  #--------------------------------------------------------------------------
  def max_tp
    return 99
  end
  #--------------------------------------------------------------------------
  # ● 表示名の取得
  #--------------------------------------------------------------------------
  def name
    @observer.name
  end
  #--------------------------------------------------------------------------
  # ● 特徴を保持する全オブジェクトの配列取得
  #--------------------------------------------------------------------------
  def feature_objects
    @observer.feature_objects
  end
  #--------------------------------------------------------------------------
  # ● 通常能力値の基本値取得
  #--------------------------------------------------------------------------
  def param(param_id)
    raise # このメソッドが呼ばれていないことを確認
  end
  #--------------------------------------------------------------------------
  # ● ID 取得
  #--------------------------------------------------------------------------
  def id
    @observer.id
  end
  #--------------------------------------------------------------------------
  # ● 味方ユニットを取得
  #--------------------------------------------------------------------------
  def friends_unit
    @observer.friends_unit
  end
  #--------------------------------------------------------------------------
  # ● 敵ユニットを取得
  #--------------------------------------------------------------------------
  def opponents_unit
    @observer.opponents_unit
  end
  #--------------------------------------------------------------------------
  # ● 武器タイプ配列の取得
  #--------------------------------------------------------------------------
  def wtypes
    @observer.wtypes
  end
  #--------------------------------------------------------------------------
  # ● ゲームマスター？
  #--------------------------------------------------------------------------
  def game_master?
    return true
  end
  #--------------------------------------------------------------------------
  # ● アクター？
  #--------------------------------------------------------------------------
  def actor?
    @observer.actor?
  end
  #--------------------------------------------------------------------------
  # ● エネミー？
  #--------------------------------------------------------------------------
  def enemy?
    @observer.enemy?
  end
  #--------------------------------------------------------------------------
  # ● アクターの取得
  #--------------------------------------------------------------------------
  def actor
    @observer.actor? ? @observer.actor : nil
  end
  #--------------------------------------------------------------------------
  # ● ベースレベルの取得
  #--------------------------------------------------------------------------
  def base_level
    @observer.actor? ? @observer.base_level : 1
  end
  #--------------------------------------------------------------------------
  # ● 職業レベルの取得
  #--------------------------------------------------------------------------
  def class_level
    @observer.actor? ? @observer.class_level : 1
  end
  #--------------------------------------------------------------------------
  # ● 種族レベルの取得
  #--------------------------------------------------------------------------
  def tribe_level
    @observer.actor? ? @observer.tribe_level : 1
  end    
  #--------------------------------------------------------------------------
  # ● 通常攻撃 アニメーション ID の取得
  #--------------------------------------------------------------------------
  def atk_animation_id1
    @observer.actor? ? @observer.atk_animation_id1 : 0
  end
  #--------------------------------------------------------------------------
  # ● 通常攻撃 アニメーション ID の取得（二刀流：武器２）
  #--------------------------------------------------------------------------
  def atk_animation_id2
    @observer.actor? ? @observer.atk_animation_id2 : 0
  end
  #--------------------------------------------------------------------------
  # ● エネミーの取得
  #--------------------------------------------------------------------------
  def enemy
    @observer.enemy? ? @observer.enemy : nil
  end
  #--------------------------------------------------------------------------
  # ● 戦闘行動終了時の処理
  #--------------------------------------------------------------------------
  def on_action_end
    @result.clear
  end
end




