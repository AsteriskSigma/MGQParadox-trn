=begin
=ベース/DataObject

ここではDataObjectを中心に扱います


==更新履歴
  Date     Version Author Comment
==14/12/19 2.0.1   トリス 統合F～I H
==15/09/03 2.0.2   トリス 統合J～U J L M N T
==17/05/16 2.0.4   トリス 統合V～W V W

=end


#==============================================================================
# ■ NWRegexp::BaseItem
#==============================================================================
module NWRegexp::BaseItem
	## 拡張追加能力値
	FEATURE_XPARAM_EX         = /<拡張(命中|回避|会心|会心回避|魔法回避|魔法反射|反撃|HP再生|MP再生|TP再生)率\s?([-+]?\d+)\%>/i
	# パーティ能力
	PARTY_ABILITY             = /<(獲得金額|獲得アイテム|エンカウント|仲間加入)倍率\s?(\d+)\%>/i
	SLOT_CHANCE               = /<スロットチャンス\s?(\d+)>/i
	UNLOCK_LEVEL              = /<解錠レベル\s?(\d+)>/i
	# バトラー能力
	STEAL_SUCCESS             = /<スティール成功率\s?(\d+)\%/i
	GET_EXP_RATE              = /<獲得経験値倍率\s?(\d+)\%>/i
	GET_CLASSEXP_RATE         = /<獲得職業経験値倍率\s?(\d+)\%>/i
	AUTO_STAND                = /<踏みとどまり\s?(\d+)\%>/i
	HEEL_REVERSE              = /<回復反転\s?(\d+)\%>/i
	AUTO_STATE                = /<オートステート\s?((?:\d+(?:\,\s?)?)+)>/i
	TRIGGER_STATE             = /<トリガーステート\s?([HMT])\s?\,\s?(\d+)\s?\,\s?(\d+)\%\s?\,\s?(\d+)>/i
	METAL_BODY                = /<メタルボディ\s?(\d+)>/i
	DEFENSE_WALL              = /<防御壁展開\s?(\d+)>/i
	INVALIDATE_WALL           = /<無効化障壁\s?(\d+)>/i
	DAMAGE_MP_CONVERT         = /<ダメージMP変換\s?(\d+)\%>/i
	DAMAGE_GOLD_CONVERT       = /<ダメージゴールド変換\s?(\d+)\%>/i
	DAMAGE_MP_DRAIN           = /<ダメージMP吸収\s?(\d+)\%>/i
	DAMAGE_GOLD_DRAIN         = /<ダメージゴールド回収\s?(\d+)\%>/i  
	DEAD_SKILL                = /<死亡時スキル\s?(\d+)>/i
	BATTLE_START_SKILL        = /<戦闘開始時発動\s?(\d+)\s?\,\s?(\d+)\%>/i
	TURN_START_SKILL          = /<ターン開始時発動\s?(\d+)\s?\,\s?(\d+)\%>/i
	TURN_END_SKILL            = /<ターン終了時発動\s?(\d+)\s?\,\s?(\d+)\%>/i
	CHANGE_ACTION             = /<行動変化\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	STYPE_COST_RATE           = /<(HP|MP|TP)タイプ消費率\s?(\d+)\s?\,\s?(\d+)\%>/i
	SKILL_COST_RATE           = /<(HP|MP|TP)スキル消費率\s?(\d+)\s?\,\s?(\d+)\%>/i
	TP_COST_RATE              = /<TP消費率\s?(\d+)\%>/i  
	HP_COST_RATE              = /<HP消費率\s?(\d+)\%>/i 
	GOLD_COST_RATE            = /<ゴールド消費率\s?(\d+)\%>/i
	INCREASE_TP               = /<最大TP(増加|減少)\s?(\d+)([%])?>/i
	START_TP_RATE             = /<開始時TP\s?(\d+)%>/i
	BATTLE_END_HEEL_HP        = /<戦闘後HP回復\s?(\d+)%>/i
	BATTLE_END_HEEL_MP        = /<戦闘後MP回復\s?(\d+)%>/i 
	NORMAL_ATTACK             = /<通常攻撃\s?(\d+)>/i
	COUNTER_SKILL             = /<反撃スキル\s?((?:\d+(?:\,\s?)?)+)>/i
	FINAL_INVOKE              = /<最終反撃\s?((?:\d+(?:\,\s?)?)+)>/i
	CERTAIN_COUNTER           = /<必中反撃\s?(\d+)\%>/i
	MAGICAL_COUNTER           = /<魔法反撃\s?(\d+)\%>/i
	CERTAIN_COUNTER_EX        = /<拡張必中反撃\s?(\d+)\%>/i
	PHYSICAL_COUNTER_EX       = /<拡張反撃\s?(\d+)\%>/i 
	MAGICAL_COUNTER_EX        = /<拡張魔法反撃\s?(\d+)\%>/i
	CONSIDERATE               = /<仲間想い\s?(\d+)\%>/i
	INVOKE_REPEATS_TYPE       = /<連続発動タイプ\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i  
	INVOKE_REPEATS_SKILL      = /<連続発動スキル\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i  
	OWN_CRUSH_RESIST          = /<自爆耐性>/i
	ELEMENT_DRAIN             = /<属性吸収\s?((?:\d+(?:\,\s?)?)+)>/i
	IGNORE_OVER_DRIVE         = /<時間停止無視>/i
	INSTANT_DEAD_REVERSE      = /<即死反転>/i  
	CHANGE_SKILL              = /<スキル変化\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i  
	ITEM_COST_SCRIMP          = /<消費アイテム節約\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	NEED_ITEM_IGNORE          = /<必要アイテム無視\s?((?:\d+(?:\,\s?)?)+)>/i
	# ブースター
	MULTI_BOOSTER             = /<(属性強化|武器強化物理|武器強化魔法|武器強化必中|通常攻撃強化|ステート割合強化タイプ|ステート固定強化タイプ|スキルタイプ強化|ステート割合強化スキル|スキル強化)\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	WTYPE_SKILL_BOOST         = /<武器スキル倍率強化\s?((?:\d+\-\d+\-\d+(?:\,\s?)?)+)>/i
	COUNTER_BOOST             = /<反撃強化\s?(\d+)\%>/i
	FALL_HP_BOOST             = /<HP減少時強化\s?(\d+)\s?\,\s?(\d+)\%>/i
	OVER_SOUL                 = /<オーバーソウル\s?(\d+)\%>/i
	# 解説追加
	DUMMY_ENCHANT             = /<解説追加(?:\:|：)(\S+)>/i
	# 
	TERRAIN_BOOSTER           = /<(\S+)地形(超)?強化>/i
	SKILL_CONVERT_PARAM       = /<能力値置き換え\s?(\d+),\s?(\d+),\s?(\d+)>/
	PHYSICAL_REFLECTION       = /<拡張物理反射率\s?([-+]?\d+)\%>/i
	EQUIP_MASTERY             = /<(武器|防具)マスタリー\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
end


#==============================================================================
# ■ NWRegexp::UsableItem
#==============================================================================
module NWRegexp::UsableItem
	EXT_SCOPE                 = /<対象(?:\:|：)(\S+)>/i
	HEEL_REVERSE_IGNORE       = /<回復反転無視>/i
	CONSIDERATE_REVISE        = /<仲間想い\s?(\d+)\%>/i
	PAY_LIFE                  = /<自爆属性>/i
	RANDOM_INVOKE             = /<ランダム発動\s?((?:\d+(?:\,\s?)?)+)>/i
	MULTI_INVOKE              = /<順番発動\s?((?:\d+(?:\,\s?)?)+)>/i
	ADD_ANIME                 = /<追加アニメ\s+(\d+)>/i
	ELEMENT_EX                = /<攻撃属性\s?((?:\d+(?:\,\s?)?)+)>/i
	WEAPON_RATE               = /<武器倍率\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i    
	APPLY_PHARMACOLOGY        = /<薬の知識適用>/i
	WARP_ITEM                 = /<ワープアイテム>/i
	PENETRATE                 = /<(属性)?(ステート)?耐性無視>/i
	SLOT                      = /<スロット>/i
	POKER                     = /<ポーカー>/i
	THROW                     = /<投擲専用>/i
	#
	ADD_STEAL                 = /<スティール付与\s?(\d+)>/i
	ITEM_GET                  = /<獲得アイテム\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	ADD_DEFENSE_WALL          = /<防御壁追加\s?(\d+)>/i
	OVER_DRIVE                = /<時間停止\s?(\d+)>/i
	GAIN_EXP                  = /<(基本|職業|種族)経験値上昇\s?(\d+)>/i
	DEATH_ELEMENT             = /<属性即死\s*ID=(\d+)(?:\s+耐性無視=([01]))?>/i
	DEATH_STATE               = /<ステート限定付与\s*対象=(\d+)\s+付与=(\d+)(?:\s+確率=(\d+))?(?:\s+耐性無視=([01]))?>/i
	SELF_ENCHANT              = /<自己付与\s+ステート=(\d+)(?:\s+確率=(\d+))?(?:\s+耐性無視=([01]))?>/i
	PREDATION                 = /<捕食技\s+起動ステート=((?:\d+(?:,)?)+)\s+吸収=(HP)?(MP)?(TP)?>/i
	RESTORATION               = /<(HP|MP)還元\s?(\d+)\%>/i
	BINDING_START             = /<拘束開始技\s?(\d+)>/i
	EBINDING_START            = /<永久拘束開始技>/i
	BIND_RESIST               = /<もがく>/i
	
	REPEATS_EX                = /<連続回数\s?(\d+)>/i
	TARGET_REJECT_USER        = /<特殊使用者除外>/i
	ERASE_DEFENSE_WALL        = /<防御壁無効化>/i
	
	ADD_ANIME                 = /<追加アニメ\s?((?:\d+(?:\,\s?)?)+)>/i
	GAIN_EXP                  = /<(基本|職業|種族)経験値上昇(非表示)?\s?(\d+)>/i # 110
	INCLUDE_BENCH             = /<待機メンバー含む>/i
	PERSONA_CHANGE            = /<人格切替\s?(\d+)>/i
end

#==============================================================================
# ■ NWRegexp::Class
#==============================================================================
module NWRegexp::Class
	CLASS_LANK                = /<職業ランク\s?(\d+)>/i
	NEED_JOBCHANGE_CLASS      = /<要求経験職\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	SELECT_JOBCHANGE_CLASS    = /<選択経験職\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	NEED_JOBCHANGE_ITEM       = /<転職アイテム\s?((?:\d+(?:\,\s?)?)+)>/i
	MEMORIZE_CAPACITY_REVISE  = /<メモライズ容量補正\s?((?:\d+(?:\,\s?)?)+)>/i
end

#==============================================================================
# ■ NWRegexp::Actor
#==============================================================================
module NWRegexp::Actor
	SEX                       = /<性別(?:\:|：)(男|ルカ)>/i
	INITIAL_TRIBE_ID          = /<初期サブクラス\s?(\d+)>/i
	USE_EXP_CURVE             = /<経験値曲線\s?(\d+)>/i
	HUMAN_ADD_FEATURES        = /<人間時追加特徴\s?(\d+)>/i
	PECULIAR_SKILL            = /<固有習得\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	INIT_CLASS_LEVEL          = /<経験済職業\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	INIT_EQUIPS               = /<初期装備(\d)(?:\:|：)(\d+)>/i
	INIT_ABILITIES            = /初期アビリティ\s?((?:\d+(?:\,\s?)?)+)/i
	BASE_TP                   = /<TP基本値\s?(\d+)>/i
	TP_LEVEL_REVISE           = /<TPLv補正\s?(\d+(?:\.\d+)?)>/i
	CATEGORY                  = /<カテゴリー(?:\:|：)(\S+)>/i
	BEST_PLACE                = /<ナワバリ(?:\:|：)(\d+)\-(\d+)\-(\d+)>/i
	PERSONA                   = /<(主人格|副人格(?:\:|：)ID\s*=\s*(\d+))>/i  
	ILLUSTRATOR_NAME          = /<イラスト(?:\:|：)(\S+)>/i
end

#==============================================================================
# ■ NWRegexp::Enemy
#==============================================================================
module NWRegexp::Enemy
	ESCAPE_LEVEL              = /<逃走レベル\s?(\d+)>/i  
	CLASSEXP                  = /<職業Exp\s?(\d+)>/i
	FRIEND_VARIABLE           = /<友好度変数\s?(\d+)>/i
	STEAL_LIST                = /<スティールリスト\s?(\d+)\s?\,\s?([IWA])\s?\,\s?(\d+)\s?\,\s?(\d+)>/i
	WEAPON_TYPE               = /<武器タイプ(?:\:|：)(\d+)>/i
	CATEGORY                  = /<種族(?:\:|：)(\S+)>/i
	LIB_NAME                  = /<図鑑名称(?:\:|：)(\S+)>/i
	JOIN_SWITCH               = /<仲間ID:(\d+)>/i
	NO_DIFFICULTY             = /<難易度補正無視>/i
	NO_PREDATION              = /<捕食無効>/
	NO_LOSE_SKIP              = /<スキップ不能>/
end

#==============================================================================
# ■ NWRegexp::Battler
#==============================================================================
module NWRegexp::Battler
	TEMPTATION_SKILL          = /<誘惑時使用スキル(?:\:|：)(\d+)>/i
end

#==============================================================================
# ■ NWRegexp::State
#==============================================================================
module NWRegexp::State
	TMP_EQUIP                 = /<武器装備\s+(\d+)>/i
	DEATH                     = /<即死>/i
	DEATH_PLEASURE            = /<快楽死亡>/i
end

#==============================================================================
# ■ NWRegexp::Skill
#==============================================================================
module NWRegexp::Skill
	HP_COST_EX                = /<(絶対)?消費(HP|MAXHP)\s?(\d+)(\%)?>/i
	MP_COST_EX                = /<(絶対)?消費(MP|MAXMP)\s?(\d+)(\%)?>/i
	TP_COST_EX                = /<(絶対)?消費(TP|MAXTP)\s?(\d+)(\%)?>/i
	GOLD_COST                 = /<消費金額\s?(\d+)>/i
	ITEM_COST                 = /<消費アイテム\s?((?:\d+\-\d+(?:\,\s?)?)+)>/i
	NEED_ITEM                 = /<必要アイテム\s?((?:\d+(?:\,\s?)?)+)>/i
	NEED_DUAL_WIELD           = /<二刀流要求>/i
	FRIEND_DRAW               = /<友好度表示>/i
	STYPE_EX                  = /<拡張スキルタイプ\s?((?:\d+(?:\,\s?)?)+)>/i
	SKILL_HIT                 = /<スキル命中率(?:\:|：)(\d+)>/i
	SKILL_HIT_FACTOR          = /<スキル命中補正率(?:\:|：)([-+]?\d+)>/i  
	NOT_LEARN_ACTORS          = /<習得不可>/i
	NOT_LEARN_ACTORS_SET      = /<習得不可\s?((?:\d+(?:\,\s?)?)+)>/i
	NO_AUTO_BATTLE            = /<自動戦闘不可>/i
	MEMORIZE_COST             = /<記憶容量\s?(\d+)>/i
	PASSIVE_ARMORS            = /<パッシブ能力防具\s?((?:\d+(?:\,\s?)?)+)>/i
	NOT_JUMBLE_MEMORIZE       = /<共存不可メモライズ\s?((?:\d+(?:\,\s?)?)+)>/i
	LIB_NAME                  = /<図鑑名称(?:\:|：)(\S+)>/i
	INVISIBLE                 = /<(?:技|スキル)名非表示>/i
	RECHARGE                  = /<必殺技\s?(\d+)>/i
	CYCLE                     = /<周期技\s?(\d+)\+(\d+)\*X>/i
	LONELY_UNUSED             = /<一人旅未使用>/i
end

#==============================================================================
# ■ NWRegexp::EquipItem
#==============================================================================
module NWRegexp::EquipItem
	EXCLUSIVE_ACTORS          = /<専用装備\s?((?:\d+(?:\,\s?)?)+)>/i
end

#==============================================================================
# ■ NWRegexp::Weapon
#==============================================================================
module NWRegexp::Weapon
	NOT_DUAL_WIELD            = /<二刀流不可>/i
end


#==============================================================================
# ■ RPG::BaseItem
#==============================================================================
class RPG::BaseItem
	#データ追加処理
	def get_value(value,type= rate)
		case type
		when :rate
			return value.to_f * 0.01
		when :int
			return value,to_i
		when :string
			return value
		end
	end
	
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_base_item_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_base_item_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::BaseItem::FEATURE_XPARAM_EX.match(line)
				array = [:命中, :回避, :会心, :会心回避, :魔法回避, :魔法反射, :反撃, :HP再生, :MP再生, :TP再生]
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_XPARAM_EX, array.index($1.to_sym), $2.to_f * 0.01))
			elsif NWRegexp::BaseItem::PARTY_ABILITY.match(line)
				kind = [:獲得金額, :獲得アイテム, :エンカウント, :仲間加入]
				kind_id = kind.index($1.to_sym)
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_PARTY_EX_ABILITY, kind_id, $2.to_f * 0.01))
			elsif NWRegexp::BaseItem::SLOT_CHANCE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_PARTY_EX_ABILITY, SLOT_CHANCE, $1.to_i))
			elsif NWRegexp::BaseItem::UNLOCK_LEVEL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_PARTY_EX_ABILITY, UNLOCK_LEVEL, $1.to_i))
			elsif NWRegexp::BaseItem::STEAL_SUCCESS.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, STEAL_SUCCESS, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::GET_EXP_RATE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, GET_EXP_RATE, $1.to_f * 0.01))        
			elsif NWRegexp::BaseItem::GET_CLASSEXP_RATE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, GET_CLASSEXP_RATE, $1.to_f * 0.01))        
			elsif NWRegexp::BaseItem::AUTO_STAND.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, AUTO_STAND, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::HEEL_REVERSE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, HEEL_REVERSE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::AUTO_STATE.match(line)
				array = []
				$1.split(/\,\s?/).each{|id|array.push(id.to_i)}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, AUTO_STATE, array))
			elsif NWRegexp::BaseItem::TRIGGER_STATE.match(line)
				hash = {:point => $1.to_sym, :trigger => $2.to_i, :per => $3.to_f * 0.01, :state_id => $4.to_i}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, TRIGGER_STATE, hash))
			elsif NWRegexp::BaseItem::METAL_BODY.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, METAL_BODY, $1.to_i))
			elsif NWRegexp::BaseItem::DEFENSE_WALL.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DEFENSE_WALL, $1.to_i))
			elsif NWRegexp::BaseItem::INVALIDATE_WALL.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, INVALIDATE_WALL, $1.to_i))
			elsif NWRegexp::BaseItem::DAMAGE_MP_CONVERT.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DAMAGE_MP_CONVERT, $1.to_f * 0.01))          
			elsif NWRegexp::BaseItem::DAMAGE_GOLD_CONVERT.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DAMAGE_GOLD_CONVERT, $1.to_f * 0.01))          
			elsif NWRegexp::BaseItem::DAMAGE_MP_DRAIN.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DAMAGE_MP_DRAIN, $1.to_f * 0.01))          
			elsif NWRegexp::BaseItem::DAMAGE_GOLD_DRAIN.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DAMAGE_GOLD_DRAIN, $1.to_f * 0.01))          
			elsif NWRegexp::BaseItem::DEAD_SKILL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, DEAD_SKILL, $1.to_i))
			elsif NWRegexp::BaseItem::BATTLE_START_SKILL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, BATTLE_START_SKILL,
						{:id => $1.to_i, :per => $2.to_f * 0.01}))
			elsif NWRegexp::BaseItem::TURN_START_SKILL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, TURN_START_SKILL,
						{:id => $1.to_i, :per => $2.to_f * 0.01}))
			elsif NWRegexp::BaseItem::TURN_END_SKILL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, TURN_END_SKILL,
						{:id => $1.to_i, :per => $2.to_f * 0.01}))
			elsif NWRegexp::BaseItem::CHANGE_ACTION.match(line)
				array = []
				$1.scan(/(\d+)\-(\d+)/){|a, b| array.push({:id => a.to_i, :per => b.to_f * 0.01})}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, CHANGE_ACTION, array))
			elsif NWRegexp::BaseItem::STYPE_COST_RATE.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, STYPE_COST_RATE, {:type => $1.to_sym, :id => $2.to_i, :rate => $3.to_f * 0.01}))
			elsif NWRegexp::BaseItem::SKILL_COST_RATE.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, SKILL_COST_RATE, {:type => $1.to_sym, :id => $2.to_i, :rate => $3.to_f * 0.01}))
			elsif NWRegexp::BaseItem::TP_COST_RATE.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, TP_COST_RATE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::HP_COST_RATE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, HP_COST_RATE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::GOLD_COST_RATE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, GOLD_COST_RATE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::INCREASE_TP.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, INCREASE_TP, {:plus => $1.to_s == "増加", :num => $2.to_i, :per => $3 ? true : false}))
			elsif NWRegexp::BaseItem::START_TP_RATE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, START_TP_RATE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::BATTLE_END_HEEL_HP.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, BATTLE_END_HEEL_HP, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::BATTLE_END_HEEL_MP.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, BATTLE_END_HEEL_MP, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::NORMAL_ATTACK.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, Battler::NORMAL_ATTACK, $1.to_i))          
			elsif NWRegexp::BaseItem::COUNTER_SKILL.match(line)
				array = []
				$1.split(/\,\s?/).each{|id| array.push(id.to_i)}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, COUNTER_SKILL, array))
			elsif NWRegexp::BaseItem::FINAL_INVOKE.match(line)  
				array = []
				$1.split(/\,\s?/).each{|id| array.push(id.to_i)}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, FINAL_INVOKE, array))
			elsif NWRegexp::BaseItem::CERTAIN_COUNTER.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, CERTAIN_COUNTER, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::MAGICAL_COUNTER.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, MAGICAL_COUNTER, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::CERTAIN_COUNTER_EX.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, CERTAIN_COUNTER_EX, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::PHYSICAL_COUNTER_EX.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, PHYSICAL_COUNTER_EX, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::MAGICAL_COUNTER_EX.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, MAGICAL_COUNTER_EX, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::CONSIDERATE.match(line)  
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, CONSIDERATE, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::INVOKE_REPEATS_TYPE.match(line)
				hash = {}
				$1.scan(/(\d+)\-(\d+)/){|a, b| hash[a.to_i] = b.to_i}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, INVOKE_REPEATS_TYPE, hash))
			elsif NWRegexp::BaseItem::INVOKE_REPEATS_SKILL.match(line)
				hash = {}
				$1.scan(/(\d+)\-(\d+)/){|a, b| hash[a.to_i] = b.to_i}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, INVOKE_REPEATS_SKILL, hash))
			elsif NWRegexp::BaseItem::OWN_CRUSH_RESIST.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, OWN_CRUSH_RESIST, true))        
			elsif NWRegexp::BaseItem::ELEMENT_DRAIN.match(line)
				array = []
				$1.split(/\,\s?/).each{|id| array.push(id.to_i)}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, ELEMENT_DRAIN, array))
			elsif NWRegexp::BaseItem::IGNORE_OVER_DRIVE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, IGNORE_OVER_DRIVE, true))        
			elsif NWRegexp::BaseItem::INSTANT_DEAD_REVERSE.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, INSTANT_DEAD_REVERSE, true))
			elsif NWRegexp::BaseItem::CHANGE_SKILL.match(line)
				hash = {}
				$1.scan(/(\d+)\-(\d+)/){|a, b| hash[a.to_i] = b.to_i}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, CHANGE_SKILL, hash))
			elsif NWRegexp::BaseItem::ITEM_COST_SCRIMP.match(line)
				hash = {}
				$1.scan(/(\d+)\-(\d+)/){|a, b| hash[a.to_i] = b.to_f * 0.01}
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, ITEM_COST_SCRIMP, hash))
			elsif NWRegexp::BaseItem::NEED_ITEM_IGNORE.match(line)
				array = []
				$1.split(/\,\s?/).each{|id| array.push(id.to_i)}          
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, NEED_ITEM_IGNORE, array))
			elsif NWRegexp::BaseItem::MULTI_BOOSTER.match(line)
				kind = [
					:属性強化,
					:武器強化物理,
					:武器強化魔法,
					:武器強化必中,
					:通常攻撃強化,
					:ステート割合強化タイプ,
					:ステート固定強化タイプ,
					:スキルタイプ強化,
					:ステート割合強化スキル,
					:スキル強化
				]
				kind_id = kind.index($1.to_sym)
				hash = {}
				$2.scan(/(\d+)\-(\d+)/){|a, b| hash[a.to_i] = b.to_f * 0.01}
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_MULTI_BOOSTER, kind_id, hash))
			elsif NWRegexp::BaseItem::WTYPE_SKILL_BOOST.match(line)  
				hash = {}
				$1.scan(/(\d+)\-(\d+)\-(\d+)/){|a, b, c| hash[[a.to_i, b.to_i]] = c.to_f * 0.01}
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_MULTI_BOOSTER, WTYPE_SKILL, hash))
			elsif NWRegexp::BaseItem::COUNTER_BOOST.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_MULTI_BOOSTER, COUNTER, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::FALL_HP_BOOST.match(line)
				hash = {:per => $1.to_f * 0.01, :boost => $2.to_f * 0.01}
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_MULTI_BOOSTER, FALL_HP, hash))
			elsif NWRegexp::BaseItem::OVER_SOUL.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_MULTI_BOOSTER, OVER_SOUL, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::DUMMY_ENCHANT.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(FEATURE_DUMMY_ENCHANT, nil, $1.to_s))
			elsif NWRegexp::BaseItem::TERRAIN_BOOSTER.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_TERRAIN_BOOSTER, $1.to_sym, $2.nil? ? 0.2 : 0.4))
			elsif NWRegexp::BaseItem::SKILL_CONVERT_PARAM.match(line)
				@data_ex[:skill_convert_param_data] ||= Hash.new
				@data_ex[:skill_convert_param_data][$1.to_i] ||= []
				@data_ex[:skill_convert_param_data][$1.to_i].push([$2.to_i + 1, $3.to_i + 1])
			elsif NWRegexp::BaseItem::PHYSICAL_REFLECTION.match(line)
				@add_features.push(RPG::BaseItem::Feature.new(
						FEATURE_BATTLER_ABILITY, PHYSICAL_REFLECTION, $1.to_f * 0.01))
			elsif NWRegexp::BaseItem::SELLD_DRAW.match(line)
				@data_ex[:selld_draw] = $1.to_s
			elsif NWRegexp::BaseItem::EXCLUDE.match(line)
				@data_ex[:lib_exclude?] = true
			elsif NWRegexp::BaseItem::EQUIP_MASTERY.match(line)
				category = [:武器, :防具].index($1.to_sym)
				$2.scan(/(\d+)\-(\d+)/) {|a, b|
					@add_features.push(RPG::BaseItem::Feature.new(
							FEATURE_EQUIP_MASTERY, [category, a.to_i], b.to_i * 0.01))
				}
				if category == 0
					@add_features.push(RPG::BaseItem::Feature.new(
							FEATURE_BATTLER_ABILITY, SLOT_CANNOT_DUAL_WIELD, true))
				end
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 指定スキルタイプの能力値置き換え
	#--------------------------------------------------------------------------
	def category_convert_param_data(stype_id)
		return [] if @data_ex[:skill_convert_param_data].nil?
		return @data_ex[:skill_convert_param_data][stype_id]
	end
end

#==============================================================================
# ■ RPG::UsableItem
#==============================================================================
class RPG::UsableItem < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● Mix-In
	#--------------------------------------------------------------------------
	include NWUsableEffect
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_usable_item_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_usable_item_note_analyze    
		
		self.note.each_line do |line|
			if NWRegexp::UsableItem::EXT_SCOPE.match(line)
				@data_ex[:ext_scope] ||= 0x0
				@data_ex[:ext_scope] |= NWSex::LUCA if $1.include?("ルカ")
				@data_ex[:ext_scope] |= NWSex::MALE if $1.include?("男")
				@data_ex[:ext_scope] |= NWSex::FEMALE if $1.include?("女")
				@data_ex[:ext_scope] |= NWSex::ALL if $1.include?("無差別")        
			elsif NWRegexp::UsableItem::HEEL_REVERSE_IGNORE.match(line)
				@data_ex[:heel_reverse_ignore] = true
			elsif NWRegexp::UsableItem::CONSIDERATE_REVISE.match(line)
				@data_ex[:considerate_revise] = $1.to_f * 0.01
			elsif NWRegexp::UsableItem::PAY_LIFE.match(line)
				@data_ex[:pay_life?] = true
			elsif NWRegexp::UsableItem::RANDOM_INVOKE.match(line)
				@data_ex[:random_invoke] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:random_invoke].push(id.to_i)}
			elsif NWRegexp::UsableItem::MULTI_INVOKE.match(line)
				@data_ex[:multi_invoke] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:multi_invoke].push(id.to_i)}
			elsif NWRegexp::UsableItem::ADD_ANIME.match(line)
				@data_ex[:add_anime] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:add_anime].push(id.to_i)}  
			elsif NWRegexp::UsableItem::ELEMENT_EX.match(line)
				@data_ex[:element_ex] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:element_ex].push(id.to_i)}        
			elsif NWRegexp::UsableItem::WEAPON_RATE.match(line)
				@data_ex[:weapon_rate] ||= {}
				$1.scan(/(\d+)\-(\d+)/){|a, b|
					@data_ex[:weapon_rate][a.to_i] = b.to_f * 0.01
				}
			elsif NWRegexp::UsableItem::APPLY_PHARMACOLOGY.match(line)
				@data_ex[:apply_pharmacology?] = true
			elsif NWRegexp::UsableItem::WARP_ITEM.match(line)
				@data_ex[:warp_item?] = true
			elsif NWRegexp::UsableItem::PENETRATE.match(line)
				@data_ex[:penetrate] ||= 0
				@data_ex[:penetrate] |= 0x1 unless $1.to_s.empty?
				@data_ex[:penetrate] |= 0x2 unless $2.to_s.empty?
			elsif NWRegexp::UsableItem::SLOT.match(line)
				@data_ex[:use_slot?] = true
			elsif NWRegexp::UsableItem::POKER.match(line)
				@data_ex[:use_poker?] = true
			elsif NWRegexp::UsableItem::THROW.match(line)
				@data_ex[:throw?] = true
			elsif NWRegexp::UsableItem::ADD_STEAL.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_STEAL, $1.to_i))        
			elsif NWRegexp::UsableItem::ITEM_GET.match(line)
				id = []; num = []
				$1.scan(/(\d+)\-(\d+)/){|a, b| id.push(a.to_i); num.push(b.to_i)}
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_GET_ITEM, id.size, id, num))
			elsif NWRegexp::UsableItem::ADD_DEFENSE_WALL.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_DEFENSE_WALL, $1.to_i))
			elsif NWRegexp::UsableItem::OVER_DRIVE.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_OVER_DRIVE, $1.to_i))
			elsif NWRegexp::UsableItem::GAIN_EXP.match(line)
				data_id = ["基本", "職業", "種族"].index($1.to_s)
				value1  = $3.to_i
				value2  = ($2.to_s != "非表示")
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_GAIN_EXP, data_id, value1, value2))
			elsif NWRegexp::UsableItem::DEATH_ELEMENT.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_DEATH_ELEMENT, 1, 1.0, {:id => $1.to_i, :opt => $2.nil? ? false : true}))
			elsif NWRegexp::UsableItem::DEATH_STATE.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_DEATH_STATE, $2.to_i, $3.nil? ? 1.0 : $3.to_f / 100.0, {:id => $1.to_i, :opt => $4.nil? ? false : true}))
			elsif NWRegexp::UsableItem::PREDATION.match(line)
				bit = 0
				bit |= 0x1 unless $2.to_s.empty?
				bit |= 0x2 unless $3.to_s.empty?
				bit |= 0x4 unless $4.to_s.empty?
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_PREDATION, 0, $1.split(",").collect{|id|id.to_i}, bit))
			elsif NWRegexp::UsableItem::SELF_ENCHANT.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_SELF_ENCHANT, $1.to_i, $2.nil? ? 1.0 : $2.to_f / 100.0, $3.nil? ? false : true))
			elsif NWRegexp::UsableItem::RESTORATION.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_RESTORATION, $1.to_sym, $2.to_i * 0.01))
			elsif NWRegexp::UsableItem::BINDING_START.match(line)
				@data_ex[:binding_start?] = true
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_BINDING_START, $1.to_i, NWConst::State::UBIND, NWConst::State::TBIND))
			elsif NWRegexp::UsableItem::EBINDING_START.match(line)
				@data_ex[:binding_start?] = true
				# 使用効果は通常版と共通
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_BINDING_START, -1, NWConst::State::EUBIND, NWConst::State::ETBIND))
			elsif NWRegexp::UsableItem::BIND_RESIST.match(line)
				@effects_ex.push(RPG::UsableItem::Effect.new(EFFECT_BIND_RESIST, 1))
			elsif NWRegexp::UsableItem::REPEATS_EX.match(line)
				@data_ex[:repeat_ex] = $1.to_i
			elsif NWRegexp::UsableItem::TARGET_REJECT_USER.match(line)
				@data_ex[:target_reject_user?] = true
			elsif NWRegexp::UsableItem::ERASE_DEFENSE_WALL.match(line)
				@data_ex[:erase_defense_wall?] = true
			elsif NWRegexp::UsableItem::INCLUDE_BENCH.match(line)
				@data_ex[:include_bench?] = true
			elsif NWRegexp::UsableItem::PERSONA_CHANGE.match(line)
				@data_ex[:persona_change] = $1.to_i
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 対象
	#--------------------------------------------------------------------------
	def ext_scope
		@data_ex.key?(:ext_scope) ? @data_ex[:ext_scope] : NWSex::ALL
	end
	#--------------------------------------------------------------------------
	# ● 回復反転無視フラグ
	#--------------------------------------------------------------------------  
	def heel_reverse_ignore?
		@data_ex.key?(:heel_reverse_ignore) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 仲間想い（使用時）
	#--------------------------------------------------------------------------  
	def considerate_revise
		@data_ex.key?(:considerate_revise) ? @data_ex[:considerate_revise] : 0.0
	end
	#--------------------------------------------------------------------------
	# ● 自爆属性？
	#--------------------------------------------------------------------------  
	def pay_life?
		@data_ex.key?(:pay_life?) ? true : false
	end  
	#--------------------------------------------------------------------------
	# ● ランダム発動
	#--------------------------------------------------------------------------
	def random_invoke
		@data_ex.key?(:random_invoke) ? @data_ex[:random_invoke] : nil
	end
	#--------------------------------------------------------------------------
	# ● 順番発動
	#--------------------------------------------------------------------------
	def multi_invoke
		@data_ex.key?(:multi_invoke) ? @data_ex[:multi_invoke] : nil
	end
	#--------------------------------------------------------------------------
	# ● スロット使用？
	#--------------------------------------------------------------------------
	def use_slot?
		@data_ex.key?(:use_slot?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● ポーカー使用？
	#--------------------------------------------------------------------------
	def use_poker?
		@data_ex.key?(:use_poker?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 追加アニメ
	#--------------------------------------------------------------------------
	def add_anime
		@data_ex.key?(:add_anime) ? @data_ex[:add_anime] : []
	end
	#--------------------------------------------------------------------------
	# ● 基本属性配列
	#--------------------------------------------------------------------------
	def default_elements
		return damage.none? || (damage.element_id == 0) ? [] : [damage.element_id]
	end
	#--------------------------------------------------------------------------
	# ● 属性配列
	#--------------------------------------------------------------------------
	def elements
		@data_ex.key?(:element_ex) ? default_elements + @data_ex[:element_ex] : default_elements
	end
	#--------------------------------------------------------------------------
	# ● 武器倍率
	#--------------------------------------------------------------------------  
	def weapon_rate(wtype_id)
		return 1.0 unless @data_ex.key?(:weapon_rate)
		return 1.0 unless @data_ex[:weapon_rate].key?(wtype_id)
		return 1.0 + @data_ex[:weapon_rate][wtype_id]
	end
	#--------------------------------------------------------------------------
	# ● 薬の知識適用？
	#--------------------------------------------------------------------------  
	def apply_pharmacology?
		@data_ex.key?(:apply_pharmacology?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● ワープアイテム？
	#--------------------------------------------------------------------------  
	def warp_item?
		@data_ex.key?(:warp_item?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 属性耐性無視？
	#--------------------------------------------------------------------------
	def element_penetrate?
		@data_ex.key?(:penetrate) ? @data_ex[:penetrate] & 0x1 == 0x1 : false
	end
	#--------------------------------------------------------------------------
	# ● 投擲専用アイテム？
	#--------------------------------------------------------------------------
	def throw?
		@data_ex.key?(:throw?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● ステート耐性無視？
	#--------------------------------------------------------------------------
	def state_penetrate?
		@data_ex.key?(:penetrate) ? @data_ex[:penetrate] & 0x2 == 0x2 : false
	end 
	#--------------------------------------------------------------------------
	# ● 拘束開始技？
	#--------------------------------------------------------------------------
	def binding_start?
		@data_ex.key?(:binding_start?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ○ 使用効果
	#--------------------------------------------------------------------------  
	alias nw_kure_usable_effects effects
	def effects
		nw_kure_usable_effects + @effects_ex
	end
	#--------------------------------------------------------------------------
	# ○ 連続回数
	#--------------------------------------------------------------------------  
	alias nw_kure_usable_repeats repeats
	def repeats
		@data_ex.key?(:repeat_ex) ? @data_ex[:repeat_ex] : nw_kure_usable_repeats
	end
	#--------------------------------------------------------------------------
	# ○ 対象から使用者を除外する
	#--------------------------------------------------------------------------
	def target_reject_user?
		@data_ex.key?(:target_reject_user?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ○ 防御壁を消す
	#--------------------------------------------------------------------------
	def erase_defense_wall?
		@data_ex.key?(:erase_defense_wall?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 待機メンバー対象？
	#--------------------------------------------------------------------------
	def include_bench?
		@data_ex.key?(:include_bench?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 人格切替
	#--------------------------------------------------------------------------  
	def persona_change
		@data_ex.key?(:persona_change) ? @data_ex[:persona_change] : nil
	end
	#--------------------------------------------------------------------------
	# ● 使用アイテム決定の種類
	#--------------------------------------------------------------------------
	def use_items_mode
		return :slot   if use_slot?
		return :poker  if use_poker?
		return :random if random_invoke
		return :multi  if multi_invoke
		return :normal
	end
end

#==============================================================================
# ■ RPG::Class
#==============================================================================
class RPG::Class < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_class_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_class_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::Class::CLASS_LANK.match(line)
				@data_ex[:class_lank] = $1.to_i
			elsif NWRegexp::Class::NEED_JOBCHANGE_CLASS.match(line)
				@data_ex[:need_jobchange_class] ||= []
				$1.scan(/(\d+)\-(\d+)/){|a, b|
					@data_ex[:need_jobchange_class].push({:id => a.to_i, :lv => b.to_i})
				}
			elsif NWRegexp::Class::SELECT_JOBCHANGE_CLASS.match(line)
				@data_ex[:select_jobchange_class] ||= []
				$1.scan(/(\d+)\-(\d+)/){|a, b|
					@data_ex[:select_jobchange_class].push({:id => a.to_i, :lv => b.to_i})
				}
			elsif NWRegexp::Class::NEED_JOBCHANGE_ITEM.match(line)
				@data_ex[:need_jobchange_item] ||= []
				$1.split(/\,\s?/).each{|id|
					@data_ex[:need_jobchange_item].push(id.to_i)
				}
			elsif NWRegexp::Class::MEMORIZE_CAPACITY_REVISE.match(line)
				@data_ex[:memorize_capacity_revise] ||= {}
				$1.split(/\,\s?/).each_with_index{|capacity, i|
					@data_ex[:memorize_capacity_revise][i + 1] = capacity.to_i
				}
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 職業ランク
	#--------------------------------------------------------------------------  
	def class_lank
		@data_ex.key?(:class_lank) ? @data_ex[:class_lank] : 0    
	end
	#--------------------------------------------------------------------------
	# ● 必要転職クラス
	#--------------------------------------------------------------------------  
	def need_jobchange_class
		@data_ex.key?(:need_jobchange_class) ? @data_ex[:need_jobchange_class] : []    
	end
	#--------------------------------------------------------------------------
	# ● 選択転職クラス
	#--------------------------------------------------------------------------  
	def select_jobchange_class
		@data_ex.key?(:select_jobchange_class) ? @data_ex[:select_jobchange_class] : []    
	end
	#--------------------------------------------------------------------------
	# ● 必要転職アイテム
	#--------------------------------------------------------------------------  
	def need_jobchange_item
		@data_ex.key?(:need_jobchange_item) ? @data_ex[:need_jobchange_item] : []    
	end
	#--------------------------------------------------------------------------
	# ● メモライズキャパシティ
	#--------------------------------------------------------------------------  
	def memorize_capacity_revise
		@data_ex.key?(:memorize_capacity_revise) ? @data_ex[:memorize_capacity_revise] : {}
	end  
	#--------------------------------------------------------------------------
	# ● 職業用クラス？
	#--------------------------------------------------------------------------
	def job?
		NWConst::Class::JOB_RANGE.include?(self.id)
	end
	#--------------------------------------------------------------------------
	# ● 種族用クラス？
	#--------------------------------------------------------------------------
	def tribe?
		NWConst::Class::TRIBE_RANGE.include?(self.id)
	end
end

#==============================================================================
# ■ RPG::Actor
#==============================================================================
class RPG::Actor < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_actor_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_actor_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::Actor::SEX.match(line)
				case $1.to_s
				when "男"
					@data_ex[:sex] = NWSex::MALE
				when "ルカ"
					@data_ex[:sex] = NWSex::LUCA
				end
			elsif NWRegexp::Actor::INITIAL_TRIBE_ID.match(line)
				@data_ex[:initial_tribe_id] = $1.to_i
			elsif NWRegexp::Actor::USE_EXP_CURVE.match(line)
				@data_ex[:use_exp_curve] = $1.to_i
			elsif NWRegexp::Actor::HUMAN_ADD_FEATURES.match(line)
				@data_ex[:human_add_features] = $1.to_i
			elsif NWRegexp::Actor::PECULIAR_SKILL.match(line)
				@data_ex[:peculiar_skill] ||= []
				$1.scan(/(\d+)\-(\d+)/){|a, b|
					@data_ex[:peculiar_skill].push({:lv=> a.to_i, :id => b.to_i})
				}
			elsif NWRegexp::Actor::INIT_CLASS_LEVEL.match(line)
				@data_ex[:init_class_level] ||= []
				$1.scan(/(\d+)\-(\d+)/){|a, b|
					@data_ex[:init_class_level].push({:id => a.to_i, :lv => b.to_i})
				}
			elsif NWRegexp::Actor::INIT_EQUIPS.match(line)
				@data_ex[:init_equips] ||= [0, 0, 0, 0, 0]
				@data_ex[:init_equips][$1.to_i] = $2.to_i if (0..4).include?($1.to_i)
			elsif NWRegexp::Actor::INIT_ABILITIES.match(line)
				@data_ex[:init_abilities] ||= []
				$1.split(/\,\s?/).each{|id|
					@data_ex[:init_abilities].push(id.to_i)
				}
			elsif NWRegexp::Actor::BASE_TP.match(line)
				@data_ex[:base_tp] = $1.to_i
			elsif NWRegexp::Actor::TP_LEVEL_REVISE.match(line)
				@data_ex[:tp_level_revise] = $1.to_f * 0.01
			elsif NWRegexp::Actor::CATEGORY.match(line)
				@data_ex[:actor_category] ||= []
				@data_ex[:actor_category].push($1.to_sym)
			elsif NWRegexp::Actor::BEST_PLACE.match(line)
				@data_ex[:best_place] =  {:map_id => $1.to_i, :x => $2.to_i, :y => $3.to_i}
			elsif NWRegexp::Actor::PERSONA.match(line)
				if $1.to_s == "主人格"
					@data_ex[:persona_kind] = :original
				else
					@data_ex[:persona_kind] = :sub
					@data_ex[:original_persona_id] = $2.to_i
				end
			elsif NWRegexp::Battler::TEMPTATION_SKILL.match(line)
				@data_ex[:temptation_skill] = $1.to_i
			elsif NWRegexp::Actor::ILLUSTRATOR_NAME.match(line)
				@data_ex[:illustrator_name] = $1.to_s
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 性別
	#--------------------------------------------------------------------------
	def sex
		@data_ex.key?(:sex) ? @data_ex[:sex] : NWSex::FEMALE
	end
	#--------------------------------------------------------------------------
	# ● 初期種族ID
	#--------------------------------------------------------------------------  
	def initial_tribe_id
		@data_ex.key?(:initial_tribe_id) ? @data_ex[:initial_tribe_id] : 0
	end
	#--------------------------------------------------------------------------
	# ● 使用経験値曲線
	#--------------------------------------------------------------------------  
	def use_exp_curve
		@data_ex.key?(:use_exp_curve) ? @data_ex[:use_exp_curve] : 0
	end
	#--------------------------------------------------------------------------
	# ● 人間時追加特徴
	#--------------------------------------------------------------------------  
	def human_add_features
		@data_ex.key?(:human_add_features) ? [$data_classes[@data_ex[:human_add_features]]] : []
	end
	#--------------------------------------------------------------------------
	# ● アクター別習得スキル
	#--------------------------------------------------------------------------  
	def peculiar_skill
		@data_ex.key?(:peculiar_skill) ? @data_ex[:peculiar_skill] : []
	end  
	#--------------------------------------------------------------------------
	# ● 初期職業レベル
	#--------------------------------------------------------------------------  
	def init_class_level
		@data_ex.key?(:init_class_level) ? @data_ex[:init_class_level] : []    
	end
	#--------------------------------------------------------------------------
	# ○ 初期装備の取得
	#--------------------------------------------------------------------------
	def equips
		@data_ex.key?(:init_equips) ? @data_ex[:init_equips] : [0,0,0,0,0]
	end
	#--------------------------------------------------------------------------
	# ● 初期アビリティ
	#--------------------------------------------------------------------------  
	def init_abilities
		@data_ex.key?(:init_abilities) ? @data_ex[:init_abilities] : []    
	end
	#--------------------------------------------------------------------------
	# ● ベースTP
	#--------------------------------------------------------------------------  
	def base_tp
		@data_ex.key?(:base_tp) ? @data_ex[:base_tp] : 0    
	end
	#--------------------------------------------------------------------------
	# ● TPレベル補正
	#--------------------------------------------------------------------------  
	def tp_level_revise
		@data_ex.key?(:tp_level_revise) ? @data_ex[:tp_level_revise] : 0.0
	end
	#--------------------------------------------------------------------------
	# ● カテゴリ
	#--------------------------------------------------------------------------  
	def actor_categories
		@data_ex.key?(:actor_category) ? @data_ex[:actor_category] : []
	end
	#--------------------------------------------------------------------------
	# ● ナワバリ
	#--------------------------------------------------------------------------  
	def best_place
		@data_ex.key?(:best_place) ? @data_ex[:best_place] : nil
	end
	#--------------------------------------------------------------------------
	# ● 人格種別
	#--------------------------------------------------------------------------  
	def persona_kind
		@data_ex.key?(:persona_kind) ? @data_ex[:persona_kind] : :none
	end
	#--------------------------------------------------------------------------
	# ● 主人格ID
	#--------------------------------------------------------------------------  
	def original_persona_id
		@data_ex.key?(:original_persona_id) ? @data_ex[:original_persona_id] : @actor_id    
	end
	#--------------------------------------------------------------------------
	# ● 誘惑時使用スキル
	#--------------------------------------------------------------------------
	def temptation_skill
		return @data_ex.key?(:temptation_skill) ? @data_ex[:temptation_skill] : nil
	end
	#--------------------------------------------------------------------------
	# ● イラストレーター名
	#--------------------------------------------------------------------------
	def illustrator_name
		return @data_ex.key?(:illustrator_name) ? @data_ex[:illustrator_name] : ""    
	end
end

#==============================================================================
# ■ RPG::Enemy
#==============================================================================
class RPG::Enemy < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_enemy_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_enemy_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::Enemy::ESCAPE_LEVEL.match(line)
				@data_ex[:escape_level] = $1.to_i
			elsif NWRegexp::Enemy::CLASSEXP.match(line)
				@data_ex[:class_exp] = $1.to_i
			elsif NWRegexp::Enemy::FRIEND_VARIABLE.match(line)
				@data_ex[:friend_variable] = $1.to_i
			elsif NWRegexp::Enemy::STEAL_LIST.match(line)
				@data_ex[:steal_list] ||= {1 => [], 2 => [], 3 => [], 4 => []}
				@data_ex[:steal_list][$1.to_i].push({
						:kind => {:I => 1, :W => 2, :A => 3}[$2.to_sym],
						:data_id => $3.to_i,
						:denominator => $4.to_i})
			elsif NWRegexp::Enemy::WEAPON_TYPE.match(line)    
				@data_ex[:wtype_id] = $1.to_i
			elsif NWRegexp::Enemy::CATEGORY.match(line)
				@data_ex[:lib_category] = $1.to_sym
			elsif NWRegexp::Enemy::LIB_NAME.match(line)
				@data_ex[:lib_name] = $1.to_s
			elsif NWRegexp::Battler::TEMPTATION_SKILL.match(line)
				@data_ex[:temptation_skill] = $1.to_i
			elsif NWRegexp::Enemy::JOIN_SWITCH.match(line)
				@data_ex[:join_switch] = $1.to_i
			elsif NWRegexp::Enemy::NO_DIFFICULTY.match(line)
				@data_ex[:no_difficulty] = true
			elsif NWRegexp::Enemy::NO_PREDATION.match(line)
				@data_ex[:no_predation] = true
			elsif NWRegexp::Enemy::NO_LOSE_SKIP.match(line)
				@data_ex[:no_lose_skip] = true
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 逃走レベル
	#--------------------------------------------------------------------------  
	def escape_level
		@data_ex.key?(:escape_level) ? @data_ex[:escape_level] : 1
	end
	#--------------------------------------------------------------------------
	# ● 職業経験値
	#--------------------------------------------------------------------------  
	def class_exp
		@data_ex.key?(:class_exp) ? @data_ex[:class_exp] : self.exp    
	end
	#--------------------------------------------------------------------------
	# ● 盗み用持ち物リスト
	#--------------------------------------------------------------------------  
	def steal_list
		@data_ex.key?(:steal_list) ? @data_ex[:steal_list] : {1 => [], 2 => [], 3 => [], 4 => []}
	end
	#--------------------------------------------------------------------------
	# ● 武器タイプ属性
	#--------------------------------------------------------------------------  
	def wtype_id
		@data_ex.key?(:wtype_id) ? @data_ex[:wtype_id] : NWConst::WType::DEFAULT_ENEMY
	end
	#--------------------------------------------------------------------------
	# ● 図鑑種族名
	#--------------------------------------------------------------------------
	def lib_category
		return @data_ex.key?(:lib_category) ? @data_ex[:lib_category] : :EMPTY
	end  
	#--------------------------------------------------------------------------
	# ● 図鑑名称
	#--------------------------------------------------------------------------
	def lib_name
		return @data_ex.key?(:lib_name) ? @data_ex[:lib_name] : self.name
	end
	#--------------------------------------------------------------------------
	# ● 誘惑時使用スキル
	#--------------------------------------------------------------------------
	def temptation_skill
		return @data_ex.key?(:temptation_skill) ? @data_ex[:temptation_skill] : nil
	end
	#--------------------------------------------------------------------------
	# ● 仲間加入表記スイッチ
	#--------------------------------------------------------------------------
	def join_switch
		@data_ex.key?(:join_switch) ? @data_ex[:join_switch] : nil
	end
	#--------------------------------------------------------------------------
	# ● 難易度補正無視
	#--------------------------------------------------------------------------
	def no_difficulty?
		@data_ex.key?(:no_difficulty) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 捕食無効
	#--------------------------------------------------------------------------
	def no_predation?
		@data_ex.key?(:no_predation) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 敗北イベントスキップ不能
	#--------------------------------------------------------------------------
	def no_lose_skip?
		@data_ex.key?(:no_lose_skip) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 友好度の設定
	#--------------------------------------------------------------------------  
	def friend=(value)
		variable_id = @data_ex.key?(:friend_variable) ? @data_ex[:friend_variable] : self.id
		$game_variables[NWConst::Var::ENEMY_REL_BASE + variable_id] = value
	end
	#--------------------------------------------------------------------------
	# ● 友好度の取得
	#--------------------------------------------------------------------------  
	def friend
		variable_id = @data_ex.key?(:friend_variable) ? @data_ex[:friend_variable] : self.id
		return $game_variables[NWConst::Var::ENEMY_REL_BASE + variable_id]
	end
	#--------------------------------------------------------------------------
	# ● 混沌の迷宮エネミーかどうか
	#--------------------------------------------------------------------------
	def ex_dungeon_enemy?
		(1001..2000).include?(id)
	end
	#--------------------------------------------------------------------------
	# ● 敗北後イベントID
	#--------------------------------------------------------------------------  
	def lose_event_id
		return NWConst::Common::LOSE_EVENT_BASE if ex_dungeon_enemy?
		return NWConst::Common::LOSE_EVENT_BASE + self.id
	end
end

#==============================================================================
# ■ RPG::State
#==============================================================================
class RPG::State < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析 
	#--------------------------------------------------------------------------
	alias nw_kure_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_note_analyze    
		self.note.each_line do |line|
			if NWRegexp::State::TMP_EQUIP.match(line)
				@data_ex[:tmp_equip] = $1.to_i
			elsif NWRegexp::State::DEATH.match(line)
				@data_ex[:death?] = true
			elsif NWRegexp::State::DEATH_PLEASURE.match(line)
				@data_ex[:death_pleasure?] = true
			end
		end
	end  
	#--------------------------------------------------------------------------
	# ● 一時装備
	#--------------------------------------------------------------------------
	def tmp_equip
		@data_ex.key?(:tmp_equip) ? @data_ex[:tmp_equip] : 0
	end  
	#--------------------------------------------------------------------------
	# ● 追加戦闘不能ステート？
	#--------------------------------------------------------------------------
	def death?
		return (self.id == 1 || @data_ex.key?(:death?)) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 快楽死亡ステート？
	#--------------------------------------------------------------------------
	def death_pleasure?
		return @data_ex.key?(:death_pleasure?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 拘束使用状態？
	#--------------------------------------------------------------------------
	def user_bind?
		return self.id == NWConst::State::UBIND
	end
	#--------------------------------------------------------------------------
	# ● 拘束対象状態？
	#--------------------------------------------------------------------------
	def target_bind?
		return self.id == NWConst::State::TBIND
	end
	#--------------------------------------------------------------------------
	# ● 永久拘束使用状態？
	#--------------------------------------------------------------------------
	def eternal_user_bind?
		return self.id == NWConst::State::EUBIND
	end
	#--------------------------------------------------------------------------
	# ● 永久拘束対象状態？
	#--------------------------------------------------------------------------
	def eternal_target_bind?
		return self.id == NWConst::State::ETBIND
	end  
end

#==============================================================================
# ■ RPG::Skill
#==============================================================================
class RPG::Skill < RPG::UsableItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_skill_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_skill_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::Skill::HP_COST_EX.match(line)
				@data_ex[:hp_cost_ex] = {}
				@data_ex[:hp_cost_ex][:data] = $3.to_i
				@data_ex[:hp_cost_ex][:abs?] = $1 ? true : false
				@data_ex[:hp_cost_ex][:max?] = $2 == "MAXHP" ? true : false
				@data_ex[:hp_cost_ex][:per?] = $4.nil? ? false : true
			elsif NWRegexp::Skill::MP_COST_EX.match(line)
				@data_ex[:mp_cost_ex] = {}
				@data_ex[:mp_cost_ex][:data] = $3.to_i
				@data_ex[:mp_cost_ex][:abs?] = $1 ? true : false
				@data_ex[:mp_cost_ex][:max?] = $2 == "MAXMP" ? true : false
				@data_ex[:mp_cost_ex][:per?] = $4.nil? ? false : true
			elsif NWRegexp::Skill::TP_COST_EX.match(line)
				@data_ex[:tp_cost_ex] = {}
				@data_ex[:tp_cost_ex][:data] = $3.to_i
				@data_ex[:tp_cost_ex][:abs?] = $1 ? true : false
				@data_ex[:tp_cost_ex][:max?] = $2 == "MAXTP" ? true : false
				@data_ex[:tp_cost_ex][:per?] = $4.nil? ? false : true
			elsif NWRegexp::Skill::GOLD_COST.match(line)
				@data_ex[:gold_cost] = $1.to_i
			elsif NWRegexp::Skill::ITEM_COST.match(line)
				@data_ex[:item_cost] ||= []
				$1.scan(/(\d+)\-(\d+)/){|a, b| @data_ex[:item_cost].push({:id => a.to_i, :num => b.to_i})}
			elsif NWRegexp::Skill::NEED_ITEM.match(line)
				@data_ex[:need_item] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:need_item].push(id.to_i)}
			elsif NWRegexp::Skill::NEED_DUAL_WIELD.match(line)
				@data_ex[:need_dual_wield?] = true
			elsif NWRegexp::Skill::FRIEND_DRAW.match(line)
				@data_ex[:friend_draw?] = true
			elsif NWRegexp::Skill::STYPE_EX.match(line)
				@data_ex[:stype_ex] ||= []
				$1.split(/\,\s?/).each{|id| @data_ex[:stype_ex].push(id.to_i)}
			elsif NWRegexp::Skill::SKILL_HIT.match(line)
				@data_ex[:skill_hit] = $1.to_f * 0.01
			elsif NWRegexp::Skill::SKILL_HIT_FACTOR.match(line)
				@data_ex[:skill_hit_factor] = $1.to_f * 0.01
			elsif NWRegexp::Skill::NOT_LEARN_ACTORS.match(line)  
				@data_ex[:not_learn_actors] = true
			elsif NWRegexp::Skill::NOT_LEARN_ACTORS_SET.match(line)  
				@data_ex[:not_learn_actors] = true
			elsif NWRegexp::Skill::MEMORIZE_COST.match(line)
				@data_ex[:memorize_cost] = $1.to_i
			elsif NWRegexp::Skill::PASSIVE_ARMORS.match(line)
				@data_ex[:passive_armors] ||= []
				$1.split(/\,\s?/).each{|id|@data_ex[:passive_armors].push(id.to_i)}
			elsif NWRegexp::Skill::NOT_JUMBLE_MEMORIZE.match(line)
				@data_ex[:not_jumble_memorize] ||= []        
				$1.split(/\,\s?/).each{|id| @data_ex[:not_jumble_memorize].push(id.to_i)}                
			elsif NWRegexp::Enemy::LIB_NAME.match(line)
				@data_ex[:lib_name] = $1.to_s
			elsif NWRegexp::Skill::INVISIBLE.match(line)
				@data_ex[:visible?] = true
			elsif NWRegexp::Skill::RECHARGE.match(line)
				@data_ex[:recharge] = $1.to_i
			elsif NWRegexp::Skill::CYCLE.match(line)
				@data_ex[:cycle] = "($game_troop.turn_count - #{$1}) % #{$2} == 0"
			elsif NWRegexp::Skill::LONELY_UNUSED.match(line)
				@data_ex[:lonely_unused?] = true
			elsif NWRegexp::Skill::NO_AUTO_BATTLE.match(line)
				@data_ex[:no_auto_battle?] = true
			end
		end
	end
	#--------------------------------------------------------------------------
	# ● 拡張消費HP
	#--------------------------------------------------------------------------
	def hp_cost_ex
		@data_ex.key?(:hp_cost_ex) ? @data_ex[:hp_cost_ex] : nil
	end
	#--------------------------------------------------------------------------
	# ● 拡張消費MP
	#--------------------------------------------------------------------------
	def mp_cost_ex
		@data_ex.key?(:mp_cost_ex) ? @data_ex[:mp_cost_ex] : nil
	end
	#--------------------------------------------------------------------------
	# ● 拡張消費TP
	#--------------------------------------------------------------------------
	def tp_cost_ex
		@data_ex.key?(:tp_cost_ex) ? @data_ex[:tp_cost_ex] : nil
	end
	#--------------------------------------------------------------------------
	# ● 消費金額
	#--------------------------------------------------------------------------
	def gold_cost
		@data_ex.key?(:gold_cost) ? @data_ex[:gold_cost] : 0
	end
	#--------------------------------------------------------------------------
	# ● 消費アイテム
	#--------------------------------------------------------------------------
	def item_cost
		@data_ex.key?(:item_cost) ? @data_ex[:item_cost] : []
	end
	#--------------------------------------------------------------------------
	# ● 必要アイテム
	#--------------------------------------------------------------------------
	def need_item
		@data_ex.key?(:need_item) ? @data_ex[:need_item] : []
	end
	#--------------------------------------------------------------------------
	# ● 二刀流要求
	#--------------------------------------------------------------------------
	def need_dual_wield?
		@data_ex.key?(:need_dual_wield?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 友好度表示？
	#--------------------------------------------------------------------------  
	def friend_draw?
		@data_ex.key?(:friend_draw?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● スキルタイプ配列
	#--------------------------------------------------------------------------
	def stypes
		@data_ex.key?(:stype_ex) ? [stype_id] + @data_ex[:stype_ex] : [stype_id]
	end
	#--------------------------------------------------------------------------
	# ● スキル命中率
	#--------------------------------------------------------------------------
	def skill_hit
		@data_ex.key?(:skill_hit) ? @data_ex[:skill_hit] : nil
	end
	#--------------------------------------------------------------------------
	# ● スキル命中補正率
	#--------------------------------------------------------------------------
	def skill_hit_factor
		@data_ex.key?(:skill_hit_factor) ? @data_ex[:skill_hit_factor] : 0.0
	end
	#--------------------------------------------------------------------------
	# ● 習得不可アクターID配列
	#--------------------------------------------------------------------------
	def not_learn_actors
		@data_ex.key?(:not_learn_actors) ? NWConst::Actor::NOT_LEARN_ACTORS : []
	end
	#--------------------------------------------------------------------------
	# ● メモライズコスト
	#--------------------------------------------------------------------------
	def memorize_cost
		@data_ex.key?(:memorize_cost) ? @data_ex[:memorize_cost] : 0
	end    
	#--------------------------------------------------------------------------
	# ● パッシブ防具ID配列
	#--------------------------------------------------------------------------
	def passive_armors
		@data_ex.key?(:passive_armors) ? @data_ex[:passive_armors] : []
	end  
	#--------------------------------------------------------------------------
	# ● 共存不可メモライズ配列
	#--------------------------------------------------------------------------
	def not_jumble_memorize
		@data_ex.key?(:not_jumble_memorize) ? @data_ex[:not_jumble_memorize] : []
	end  
	#--------------------------------------------------------------------------
	# ● 図鑑名称
	#--------------------------------------------------------------------------
	def lib_name
		return @data_ex.key?(:lib_name) ? @data_ex[:lib_name] : self.name
	end
	#--------------------------------------------------------------------------
	# ● 不可視フラグ取得 
	#--------------------------------------------------------------------------
	def visible?
		@data_ex.key?(:visible?) ? false : true    
	end
	#--------------------------------------------------------------------------
	# ● 再使用ターン
	#--------------------------------------------------------------------------
	def recharge
		return @data_ex.key?(:recharge) ? @data_ex[:recharge] : 0
	end
	#--------------------------------------------------------------------------
	# ● 周期技判定
	#--------------------------------------------------------------------------
	def cycle_skill?
		return @data_ex.key?(:cycle) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 周期条件の評価
	#--------------------------------------------------------------------------
	def cycle_eval
		return cycle_skill? ? eval(@data_ex[:cycle]) : false
	end
	#--------------------------------------------------------------------------
	# ● 一人旅未使用？
	#--------------------------------------------------------------------------
	def lonely_unused?
		return @data_ex.key?(:lonely_unused?) ? true : false
	end  
	#--------------------------------------------------------------------------
	# ● 自動戦闘不可
	#--------------------------------------------------------------------------
	def no_auto_battle?
		@data_ex.key?(:no_auto_battle?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● スキル判定
	#--------------------------------------------------------------------------
	def is_skill?
		return true
	end
	#--------------------------------------------------------------------------
	# ● 対象
	#--------------------------------------------------------------------------
	def ext_scope
		return NWSex::LUCA if bind? || eternal_bind?
		return super
	end  
	#--------------------------------------------------------------------------
	# ● 拘束時専用技？
	#--------------------------------------------------------------------------
	def bind?
		self.stype_id == NWConst::SType::BIND
	end
	#--------------------------------------------------------------------------
	# ● 永久拘束時専用技？
	#--------------------------------------------------------------------------
	def eternal_bind?
		self.stype_id == NWConst::SType::EBIND
	end
end

#==============================================================================
# ■ RPG::EquipItem
#==============================================================================
class RPG::EquipItem < RPG::BaseItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_equip_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_equip_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::EquipItem::EXCLUSIVE_ACTORS.match(line)
				@data_ex[:exclusive_actors] ||= []
				$1.split(/\,\s?/).each{|id|
					@data_ex[:exclusive_actors].push(id.to_i)
				}
			end
		end 
	end
	#--------------------------------------------------------------------------
	# ● 専用装備
	#--------------------------------------------------------------------------
	def exclusive_actors
		@data_ex.key?(:exclusive_actors) ? @data_ex[:exclusive_actors] : nil
	end
end

#==============================================================================
# ■ RPG::Weapon
#==============================================================================
class RPG::Weapon < RPG::EquipItem
	#--------------------------------------------------------------------------
	# ● メモ欄解析処理
	#--------------------------------------------------------------------------
	alias nw_kure_weapon_note_analyze nw_note_analyze
	def nw_note_analyze
		nw_kure_weapon_note_analyze
		
		self.note.each_line do |line|
			if NWRegexp::Weapon::NOT_DUAL_WIELD.match(line)
				@data_ex[:not_dual_wield?] = true
			end
		end 
	end
	#--------------------------------------------------------------------------
	# ● 二刀流不可？
	#--------------------------------------------------------------------------
	def not_dual_wield?
		@data_ex.key?(:not_dual_wield?) ? true : false
	end
	#--------------------------------------------------------------------------
	# ● 性能評価
	#--------------------------------------------------------------------------
	def performance 
		params.inject(0) {|r, v| r += v }
	end
end


#==============================================================================
# ■ RPG::Armor
#==============================================================================
class RPG::Armor < RPG::EquipItem
	#--------------------------------------------------------------------------
	# ● アクセサリ判定
	#--------------------------------------------------------------------------
	def is_accessory?
		return self.atype_id == NWConst::Armor::ACCESSORY
	end
end

#==============================================================================
# ■ RPG::Item
#==============================================================================
class RPG::Item < RPG::UsableItem
	#--------------------------------------------------------------------------
	# ● スキル判定
	#--------------------------------------------------------------------------
	def is_skill?
		return false
	end
	#--------------------------------------------------------------------------
	# ● プレゼント判定
	#--------------------------------------------------------------------------
	def is_present?
		NWConst::Item::PRESENT_RANGE.include?(self.id)
	end
end












