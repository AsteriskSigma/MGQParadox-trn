
=begin

Troublesome · ___ ___ 0 RPG
Save troubleshooting ver 7 2015/07/11


the term
Normal save data Save 01.rvdata2Such
Save in game save
Backup save data SaveBackup.rvdata2Same as normal save data
Save save a certain number of times in game
Auto save data AutoSave 01.rvdata2Same as normal save data
Save at a specific timing

For the function list explanation below, what newly added with this ver is ● What you changed is ○
· Display failure cause data at normal save failure
- Normal save data so that normal save data will not be lost at the time of failure
· Change the backup interval of normal save
○ Autosave at specific timing

Feature Description
○ Autosave at specific timing
① Victory over random encounter battle
② Open the menu
Every time it auto save and display success or failure on the console
However, if saving is prohibited, auto saving is not performed and a message to that effect is displayed on the console

=end

module SaveData
  
  # Messages displayed in message box when saving fails
  # Since [Normal] [Auto] [Backup] is inserted at the beginning, \"Save\" at the beginning
  # <1>Is converted to FailireMesBackUp only when backup save fails
  # <2>The part of \"save cause failure: ◯◯ \"
  FailureMes1 = [
    "Save failed",
    "Please immediately close the game and restart the PC<1>",
    "",
    "<2>",
    "",
    "When \"save cause failure\" on this is \"unknown\"",
    "It is caused by the environment of the PC, and it seems that it will not occur for a while if it restarts",
    "",
    "If it is not \"unknown\", please report the following 3 points",
    "① \"Cause of save failure: Contents of ○ ○",
    "② Acts that I went from the previous \"From\" \"menu open\" or \"encounter battle victory\" to the present moment",
    "③ Current Story Progress",
  ]
  
  # Message displayed in message box when saving thumbnail fails
  # Since [Normal] [Auto] [Backup] is inserted at the beginning, \"Save\" at the beginning
  # <1>Is converted to FailireMesBackUp only when backup save fails
  FailureMes2 = [
    "Creation of thumbnail image at save failed",
    "Please immediately close the game and restart the PC<1>",
    "",
    "Save screen/Just because the thumbnail image displayed on the load screen has not been updated",
    "The save itself was done normally",
    "",
    "It is caused by the environment of the PC, and it seems that it will not occur for a while if it restarts",
  ]
  
  # Message added when backup fails
  FailureMesBackUp = "(Since backup only failed, there is no problem with the original saved data)"
  
  # Change save interval of backup save data Previously 5
  # If the remainder of \"save count ÷ this value\" is 0 at normal save, create a backup
  BackUpNum = 1
  
  # Name of auto save read command
  AutoCommandName = "Load Autosave"
  
  # Title window Command window width Default:160
  TitleCommandWidth = 180
  
end

#==============================================================================
# ■ DataManager
#==============================================================================
class << DataManager
  #--------------------------------------------------------------------------
  # ● Existence determination of save file
  #--------------------------------------------------------------------------
  def save_file_exists?
    !Dir.glob('Save/Save*.rvdata2').empty?
  end
  #--------------------------------------------------------------------------
  # ● Existence determination of save file
  #--------------------------------------------------------------------------
  def auto_save_file_exists?
    return false if Dir.glob('Save/AutoSave*.rvdata2').empty?
    return false unless load_header("01")[:save_index].is_a?(Integer)
    return true
    !Dir.glob('Save/AutoSave*.rvdata2').empty?
  end
  #--------------------------------------------------------------------------
  # ● Create save trial file name
  #--------------------------------------------------------------------------
  def make_temp_filename
    sprintf("Save/SaveTemp.rvdata2")
  end
  #--------------------------------------------------------------------------
  # ● Delete save trial file
  #--------------------------------------------------------------------------
  def delete_temp_file
    File.delete(make_temp_filename) if File.exist?(make_temp_filename)
  end
  #--------------------------------------------------------------------------
  # ● Create file name
  #     index : File index
  #--------------------------------------------------------------------------
  def make_filename(index)
    if index.is_a?(Integer)
      sprintf("Save/Save%02d.rvdata2", index + 1)
    else
      sprintf("Save/AutoSave%s.rvdata2", index)
    end
  end
  #--------------------------------------------------------------------------
  # ○ Creating an auto save header
  #--------------------------------------------------------------------------
  def make_auto_save_header
    header = make_save_header
    header[:save_index] = DataManager.last_savefile_index
    return header
  end
  
  #--------------------------------------------------------------------------
  # ○ Execute Save
  #--------------------------------------------------------------------------
  def save_game(index)
    begin
      Dir.mkdir("Save") unless Dir.exist?("Save")
      save_game_without_rescue(index)
      begin;  save_thumbnail(sprintf("Save/Save%02d", index + 1))
      rescue; process_save_failure2("Normal")
      end
      if $game_system.save_count % SaveData::BackUpNum == 0
        begin
          save_game_backup_without_rescue
          begin;  save_thumbnail("Save/SaveBackup")
          rescue; process_save_failure2("backup")
          end
        rescue; process_save_failure1("backup")
        end
      end
      delete_temp_file
      true
    rescue
      process_save_failure1("Normal")
      delete_temp_file
      false
    end
  end
  #--------------------------------------------------------------------------
  # ● Execute save (no exception handling)
  #--------------------------------------------------------------------------
  def save_game_without_rescue(index)
    File.open(make_temp_filename, "wb") do |file|
      $game_system.on_before_save
      Marshal.dump(make_save_header, file)
      Marshal.dump(make_save_contents, file)
      @last_savefile_index = index
    end
    File.rename(make_temp_filename, make_filename(index))
    return true
  end
  #--------------------------------------------------------------------------
  # ● Execute backup save (no exception handling)
  #--------------------------------------------------------------------------
  def save_game_backup_without_rescue
    File.open(make_temp_filename, "wb") do |file|
      Marshal.dump(make_save_header, file)
      Marshal.dump(make_save_contents, file)
    end
    File.rename(make_temp_filename, "Save/SaveBackup.rvdata2")
    return true
  end
  
  #--------------------------------------------------------------------------
  # ● Creating a display name when saving fails
  #--------------------------------------------------------------------------
  def save_failure_word(text)
    return NWPatch.ver_name(" - Save failure message\n\n") + "[" + text + "】"
  end
  #--------------------------------------------------------------------------
  # ● Processing at the time of saving failure
  #--------------------------------------------------------------------------
  def process_save_failure1(text)
    text = save_failure_word(text)
    m1 = text + SaveData::FailureMes1.inject("") { |r, text| r += text + "\n" }
    m2 = "unknown"
    begin
      File.open(make_temp_filename, "wb") do |file|
        make_save_header.each do |key, value|
          m2 = "header " + key.to_s
          Marshal.dump(value, file)
        end
        make_save_contents.each do |key, value|
          m2 = "contents " + key.to_s
          Marshal.dump(value, file)
        end
      end
      m2 = "unknown"
    rescue
    end
    backup = text.include?("backup")
    m1.gsub!("<1>") { backup ? "\n" + SaveData::FailureMesBackUp : "" }
    m1.gsub!("<2>") { sprintf("Cause of save failure: %s", m2) }
    msgbox m1
  end
  #--------------------------------------------------------------------------
  # ● Processing when thumbnail fails
  #--------------------------------------------------------------------------
  def process_save_failure2(text)
    text = save_failure_word(text)
    m1 = text + SaveData::FailureMes2.inject("") { |r, text| r += text + "\n" }
    backup = text.include?("backup")
    m1.gsub!("<1>") { backup ? "\n" + SaveData::FailureMesBackUp : "" }
    msgbox m1
  end
  
  #--------------------------------------------------------------------------
  # ● Execute load (no exception handling)
  #--------------------------------------------------------------------------
  def load_game_without_rescue(index)
    File.open(make_filename(index), "rb") do |file|
      Marshal.load(file)
      extract_save_contents(Marshal.load(file))
      reload_map_if_updated
      @last_savefile_index = load_header(index)[:save_index]
      @last_savefile_index ||= index
    end
    return true
  end
  
  #--------------------------------------------------------------------------
  # ○ Auto save execution
  #--------------------------------------------------------------------------
  def auto_save_game
    if $game_system.save_disabled
      puts "★ I attempted to execute auto save, but it is ineffective due to inability to save"
      return
    end
    puts "★ Execute auto save"
    index = "01"
    begin
      Dir.mkdir("Save") unless Dir.exist?("Save")
      auto_save_game_without_rescue(index)
      delete_temp_file
      true
    rescue
      delete_temp_file
      process_save_failure1("Auto")
      false
    end
  end
  #--------------------------------------------------------------------------
  # ○ Auto save execution (no exception processing)
  #--------------------------------------------------------------------------
  def auto_save_game_without_rescue(index)
    File.open(make_temp_filename, "wb") do |file|
      $game_system.on_before_save
      $game_system.on_before_auto_save
      Marshal.dump(make_auto_save_header, file)
      Marshal.dump(make_save_contents, file)
    end
    File.rename(make_temp_filename, make_filename(index))
    return true
  end
end
#==============================================================================
# ■ Game_System
#==============================================================================
class Game_System
  #--------------------------------------------------------------------------
  # ● Processing before saving
  #--------------------------------------------------------------------------
  def on_before_auto_save
    @save_count -= 1
  end
end

#==============================================================================
# ■ BattleManager
#==============================================================================
class << BattleManager
  #--------------------------------------------------------------------------
  # ○ Treatment of victory
  #--------------------------------------------------------------------------
  alias :savedata_process_victory :process_victory
  def process_victory
    result = savedata_process_victory
    DataManager.auto_save_game unless @event_proc
    return result
  end
end
#==============================================================================
# ■ Scene_Map
#==============================================================================
class Scene_Map < Scene_Base
  #--------------------------------------------------------------------------
  # ● Call up the menu screen
  #--------------------------------------------------------------------------
  def call_menu
    DataManager.auto_save_game
    Sound.play_ok
    SceneManager.call(Scene_Menu)
    Window_MenuCommand::init_command_position
  end
end
#==============================================================================
# ■ Window_TitleCommand
#==============================================================================
class Window_TitleCommand < Window_Command
  #--------------------------------------------------------------------------
  # ● Create command list
  #--------------------------------------------------------------------------
  def make_command_list
    add_command(Vocab::new_game, :new_game)
    add_command(Vocab::continue, :continue, continue_enabled)
    add_command(SaveData::AutoCommandName, :auto_continue, auto_continue_enabled)
    add_command(Vocab::shutdown, :shutdown)
  end
  #--------------------------------------------------------------------------
  # ● Get the valid state of auto save read
  #--------------------------------------------------------------------------
  def auto_continue_enabled
    DataManager.auto_save_file_exists?
  end
  #--------------------------------------------------------------------------
  # ● Obtain window width
  #--------------------------------------------------------------------------
  def window_width
    return SaveData::TitleCommandWidth
  end
end
#==============================================================================
# ■ Scene_Title
#==============================================================================
class Scene_Title < Scene_Base
  #--------------------------------------------------------------------------
  # ● Create Command Window
  #--------------------------------------------------------------------------
  def create_command_window
    @command_window = Window_TitleCommand.new
    @command_window.set_handler(:new_game, method(:command_new_game))
    @command_window.set_handler(:continue, method(:command_continue))
    @command_window.set_handler(:auto_continue, method(:command_auto_continue))
    @command_window.set_handler(:shutdown, method(:command_shutdown))
  end
  #--------------------------------------------------------------------------
  # ● Command [Start from auto save]
  #--------------------------------------------------------------------------
  def command_auto_continue
    close_command_window
    SceneManager.call(Scene_AutoSave_Load)
  end
end
#==============================================================================
# ■ Scene_AutoSave_Load
#==============================================================================
class Scene_AutoSave_Load < Scene_Load
  #--------------------------------------------------------------------------
  # ● Get help window text
  #--------------------------------------------------------------------------
  def help_window_text
    "Choose an autosave to load"
  end
  #--------------------------------------------------------------------------
  # ● Get file index to be selected first
  #--------------------------------------------------------------------------
  def first_savefile_index
    0
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of number of items
  #--------------------------------------------------------------------------
  def item_max
    3
  end
  #--------------------------------------------------------------------------
  # ● Determine Save File
  #--------------------------------------------------------------------------
  def on_savefile_ok
    super
    if DataManager.load_game("01")
      on_load_success
    else
      Sound.play_buzzer
    end
  end
  #--------------------------------------------------------------------------
  # ● Create Save File Window
  #--------------------------------------------------------------------------
  def create_savefile_windows
    @savefile_windows = Array.new(item_max) do |i|
      Window_AutoSaveFile.new(savefile_height, i)
    end
    @savefile_windows.each {|window| window.viewport = @savefile_viewport }
  end
  #--------------------------------------------------------------------------
  # ● Updating the cursor
  #--------------------------------------------------------------------------
  def update_cursor
  end
end
#==============================================================================
# ■ Window_AutoSaveFile
#==============================================================================
class Window_AutoSaveFile < Window_SaveFile
  #--------------------------------------------------------------------------
  # ● Object initialization
  #--------------------------------------------------------------------------
  def initialize(height, index_num)
    @file_index_num = index_num
    super(height, index_num)
    @file_index = sprintf("%02d", index_num + 1)
    refresh
    contents.clear if index_num != 0
    @selected = false
  end
  #--------------------------------------------------------------------------
  # ● Drawing a file name
  #--------------------------------------------------------------------------
  def draw_filename(x, y)
    change_color(normal_color)
    name = Vocab::File + " #{@file_index_num + 1}"
    draw_text(x, y, 200, line_height, name)
    @name_width = text_size(name).width
  end
  #--------------------------------------------------------------------------
  # ● Drawing thumbnails
  #--------------------------------------------------------------------------
  def draw_thumbnail(x, y)
    thumbnail = DataManager.get_thumbnail(@file_index)
    thumbnail ||= DataManager.get_dummy_thumbnail
    contents.blt(x, y, thumbnail, thumbnail.rect)
    draw_text(x + 4, y, 200, line_height, "Autosave")
    return unless DataManager.load_header(@file_index)
    save_index = DataManager.load_header(@file_index)[:save_index]
    return unless save_index.is_a?(Integer)
    t = "File #{save_index + 1}"
    draw_text(x + 4, y + line_height, 200, line_height, t) 
  end
endd