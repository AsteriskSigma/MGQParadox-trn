=begin
=Sagaflo's Time Art: Reproduce overdrive/Time Stop

Sagaflo's Time Art: Reproduce overdrive
The result window and memo field acquisition are incorporated in the base system All, should we merge?

==Change log
  Date     Version Author Comment

=end

#==============================================================================
# ■ NWConst::OverDrive
#==============================================================================
module NWConst::OverDrive
  FADE_STRUCT  = Struct.new(:tone_r,:tone_g,:tone_b,:wave_a,:wave_l)
  DEFAULT_FADE = FADE_STRUCT.new(0.0, 0.0, 0.0, 0, 180)    
  START_SE     = RPG::SE.new("Skill2", 80, 100)
  FADE_FRAME   = 60
  BASE_VOLUME  = 100
end

#==============================================================================
# ■ Audio
#==============================================================================
class << Audio
  #--------------------------------------------------------------------------
  # ○ Update processing
  #--------------------------------------------------------------------------
  alias nw_od_update update
  def update
    nw_od_update
    update_over_drive if $game_party.in_battle
  end
  #--------------------------------------------------------------------------
  # ● Update processing (for overdrive)
  #--------------------------------------------------------------------------
  def update_over_drive
    @fiber_bgm.resume if @fiber_bgm
  end
  #--------------------------------------------------------------------------
  # ● Start over drive
  #--------------------------------------------------------------------------
  def start_over_drive
    @fiber_bgm = Fiber.new{ fiber_over_drive_fadein } unless @fiber_bgm
  end
  #--------------------------------------------------------------------------
  # ● Termination of overdrive
  #--------------------------------------------------------------------------
  def end_over_drive
    @fiber_bgm = Fiber.new{ fiber_over_drive_fadeout } unless @fiber_bgm    
  end  
  #--------------------------------------------------------------------------
  # ● Fiber treatment for fade-in
  #--------------------------------------------------------------------------
  def fiber_over_drive_fadein
    bgm = RPG::BGM.last
    original_volume = NWConst::OverDrive::BASE_VOLUME
    (0...NWConst::OverDrive::FADE_FRAME).reverse_each{|i|
      volume = original_volume * (i / Float(NWConst::OverDrive::FADE_FRAME))
      bgm_play('Audio/BGM/' + bgm.name, volume, bgm.pitch)
      Fiber.yield      
    }
    @fiber_bgm = nil
  end
  #--------------------------------------------------------------------------
  # ● Fiber treatment for fade out
  #--------------------------------------------------------------------------
  def fiber_over_drive_fadeout
    bgm = RPG::BGM.last
    original_volume = NWConst::OverDrive::BASE_VOLUME
    (0...NWConst::OverDrive::FADE_FRAME).each{|i|
      volume = original_volume * (i / Float(NWConst::OverDrive::FADE_FRAME))
      bgm_play('Audio/BGM/' + bgm.name, volume, bgm.pitch)
      Fiber.yield      
    }
    @fiber_bgm = nil
  end
end

#==============================================================================
# ■ BattleManager
#==============================================================================
class << BattleManager
  #--------------------------------------------------------------------------
  # ○ End of Turn
  #--------------------------------------------------------------------------
  alias nw_od_turn_end turn_end
  def turn_end
    nw_od_turn_end
    $game_party.od_count
  end
  #--------------------------------------------------------------------------
  # ○ Acquisition of the next acting entity
  #    Get a butler from the beginning of the action order list.
  #    If you get an actor that is not currently in the party (index is nil, Battle Ive
  #    Occurred immediately after leaving, etc.), skip it.
  #--------------------------------------------------------------------------
  alias nw_od_next_subject next_subject
  def next_subject
    loop do
      battler = nw_od_next_subject
      return nil unless battler
      next if $game_party.in_over_drive? && (($game_party.od_user != battler) && !battler.ignore_over_drive?)
      return battler
    end
  end
end

#==============================================================================
# ■ Game_Screen
#==============================================================================
class Game_Screen
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #--------------------------------------------------------------------------
  attr_reader   :od_fade_now
  #--------------------------------------------------------------------------
  # ○ Clear
  #--------------------------------------------------------------------------
  alias nw_od_clear clear
  def clear
    nw_od_clear
    clear_od_fade
  end
  #--------------------------------------------------------------------------
  # ● Clear fade for overdrive
  #--------------------------------------------------------------------------
  def clear_od_fade
    @od_fade_now   = NWConst::OverDrive::DEFAULT_FADE.clone
    @od_fade_start = @od_fade_now.clone
    @od_fade_goal  = @od_fade_now.clone
    @duration = 0
  end
  #--------------------------------------------------------------------------
  # ○ Frame update
  #--------------------------------------------------------------------------
  alias nw_od_update update
  def update
    nw_od_update
    update_od_fade
  end
  #--------------------------------------------------------------------------
  # ● Updating fade for overdrive
  #--------------------------------------------------------------------------
  def update_od_fade
    return unless od_fade?
    @duration -= 1
    @od_fade_now.tone_r = math_od_fade(@od_fade_start.tone_r, @od_fade_goal.tone_r)
    @od_fade_now.tone_g = math_od_fade(@od_fade_start.tone_g, @od_fade_goal.tone_g)
    @od_fade_now.tone_b = math_od_fade(@od_fade_start.tone_b, @od_fade_goal.tone_b)
    @od_fade_now.wave_a = math_od_fade(@od_fade_start.wave_a, @od_fade_goal.wave_a)
    @od_fade_now.wave_l = math_od_fade(@od_fade_start.wave_l, @od_fade_goal.wave_l)
  end
  #--------------------------------------------------------------------------
  # ● Calculation for fade 【division caution】
  #--------------------------------------------------------------------------
  def math_od_fade(start,goal)
    goal - (goal - start) * (@duration / Float(NWConst::OverDrive::FADE_FRAME))
  end
  #--------------------------------------------------------------------------
  # ● Fade for overdrive?
  #--------------------------------------------------------------------------
  def od_fade?
    0 < @duration
  end
  #--------------------------------------------------------------------------
  # ● Fade in for overdrive
  #--------------------------------------------------------------------------
  def od_fadein
    @od_fade_goal.tone_r   = -100.0
    @od_fade_goal.tone_g   = -100.0
    @od_fade_goal.tone_b   = -100.0
    @od_fade_goal.wave_a   = 30
    @od_fade_goal.wave_l   = 360
    @od_fade_start = @od_fade_now.clone
    @duration = NWConst::OverDrive::FADE_FRAME
  end
  #--------------------------------------------------------------------------
  # ● Fade out for overdrive
  #--------------------------------------------------------------------------
  def od_fadeout
    @od_fade_goal.tone_r   = 0.0
    @od_fade_goal.tone_g   = 0.0
    @od_fade_goal.tone_b   = 0.0
    @od_fade_goal.wave_a   = 0
    @od_fade_goal.wave_l   = 180
    @od_fade_start = @od_fade_now.clone
    @duration = NWConst::OverDrive::FADE_FRAME
  end
end

#==============================================================================
# ■ Game_Battler
#==============================================================================
class Game_Battler < Game_BattlerBase
  #--------------------------------------------------------------------------
  # ● Effect of use [time stop]
  #--------------------------------------------------------------------------
  def item_effect_over_drive(user, item, effect)
    return unless $game_party.in_battle
    unless $game_party.in_over_drive?
      $game_party.od_turn = effect.data_id
      $game_party.od_user = self
      $game_troop.screen.od_fadein
      Audio.start_over_drive
      NWConst::OverDrive::START_SE.play
      @result.success = true
    end
    @result.over_drive = true
  end
end

#==============================================================================
# ■ Game_Actor
#==============================================================================
class Game_Actor < Game_Battler
  #--------------------------------------------------------------------------
  # ○ Command input possible judgment
  #--------------------------------------------------------------------------
  alias nw_od_inputable? inputable?
  def inputable?
    nw_od_inputable? && $game_party.od_inputable?(self)
  end
end

#==============================================================================
# ■ Game_Party
#==============================================================================
class Game_Party < Game_Unit
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #--------------------------------------------------------------------------
  attr_accessor   :od_turn
  attr_accessor   :od_user

  #--------------------------------------------------------------------------
  # ○ Object initialization
  #--------------------------------------------------------------------------
  alias nw_od_initialize initialize
  def initialize
    nw_od_initialize
    clear_over_drive
  end
  #--------------------------------------------------------------------------
  # ● Initialize overdrive state
  #--------------------------------------------------------------------------
  def clear_over_drive
    @od_turn = 0
    @od_user = nil
  end
  #--------------------------------------------------------------------------
  # ● Under overdriving?
  #--------------------------------------------------------------------------
  def in_over_drive?
    0 < @od_turn
  end
  #--------------------------------------------------------------------------
  # ● Advance count of overdrive
  #--------------------------------------------------------------------------
  def od_count
    return unless in_over_drive?
    @od_turn -= 1
    
    return if in_over_drive?
    $game_troop.screen.od_fadeout
    Audio.end_over_drive
  end
  #--------------------------------------------------------------------------
  # Is it ready for input?
  #--------------------------------------------------------------------------
  def od_inputable?(actor)
    !in_over_drive? || (in_over_drive? && ((actor == @od_user) || actor.ignore_over_drive?))
  end
  #--------------------------------------------------------------------------
  # Battle start processing
  #--------------------------------------------------------------------------
  alias nw_od_on_battle_start on_battle_start
  def on_battle_start
    nw_od_on_battle_start
    clear_over_drive
  end
  #--------------------------------------------------------------------------
  # Battle end processing
  #--------------------------------------------------------------------------
  alias nw_od_on_battle_end on_battle_end
  def on_battle_end
    nw_od_on_battle_end
    clear_over_drive
  end
end

#==============================================================================
# ■ Spriteset_Battle
#==============================================================================
class Spriteset_Battle
  #--------------------------------------------------------------------------
  # ○ Battle Background (Floor) Update sprite
  #--------------------------------------------------------------------------
  alias nw_od_update_battleback1 update_battleback1
  def update_battleback1
    nw_od_update_battleback1
    @back1_sprite.tone.red    = $game_troop.screen.od_fade_now.tone_r
    @back1_sprite.tone.green  = $game_troop.screen.od_fade_now.tone_g
    @back1_sprite.tone.blue   = $game_troop.screen.od_fade_now.tone_b
    @back1_sprite.wave_amp    = $game_troop.screen.od_fade_now.wave_a
    @back1_sprite.wave_length = $game_troop.screen.od_fade_now.wave_l
  end
  #--------------------------------------------------------------------------
  # ○ Battle Background (Wall) Update Sprite
  #--------------------------------------------------------------------------
  alias nw_od_update_battleback2 update_battleback2
  def update_battleback2
    nw_od_update_battleback2
    @back2_sprite.tone.red    = $game_troop.screen.od_fade_now.tone_r
    @back2_sprite.tone.green  = $game_troop.screen.od_fade_now.tone_g
    @back2_sprite.tone.blue   = $game_troop.screen.od_fade_now.tone_b
    @back2_sprite.wave_amp    = $game_troop.screen.od_fade_now.wave_a
    @back2_sprite.wave_length = $game_troop.screen.od_fade_now.wave_l
  end
end

#==============================================================================
# ■ Scene_Battle
#==============================================================================
class Scene_Battle < Scene_Base
  #--------------------------------------------------------------------------
  # ○ Processing events
  #--------------------------------------------------------------------------
  alias nw_od_process_event process_event
  def process_event
    return if $game_party.in_over_drive?
    nw_od_process_event
  end
	
  #--------------------------------------------------------------------------
  # ○ End of Turn
  #--------------------------------------------------------------------------
  def turn_end
		members = $game_party.in_over_drive? ? [$game_party.od_user] : all_battle_members
    members.each do |battler|
      battler.on_turn_end
      refresh_status
      @log_window.display_auto_affected_status(battler)
      @log_window.wait_and_clear
    end
    BattleManager.turn_end
    process_event
    BattleManager.set_turn_end_skill
    process_action while BattleManager.gm_exist?
    # Command entry skipping when surrendering
    if BattleManager.giveup?
      if BattleManager.giveup_count_down
        actor = $game_actors[NWConst::Actor::LUCA]
        actor.add_state(actor.death_state_id)
        actor.orgasm_word.execute
        process_luca_orgasm
        BattleManager.process_defeat
      else
        $game_troop.make_actions
        turn_start
      end
    else
      start_party_command_selection
    end
  end
end










