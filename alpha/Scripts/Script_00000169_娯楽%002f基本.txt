=begin
=Entertainment/Basic

· Entertainment currency is coin (coin)
medalSo if you get a small medal or achievement

==Change log
  Date     Version Author Comment
==14/12/19 2.0.1   Tris Integration F to I I
==15/09/03 2.0.2   Tris integration J ~ U L O

=end

#==============================================================================
# ■ NWConst::Casino
#==============================================================================
module NWConst::Casino
  
  # Slot and poker BGM
  BGM      = RPG::BGM.new("Town3")
  
  # Change of bet number of slot and SE of coin variation
  BET_SE   = RPG::SE.new("Cursor1")
  COIN_SE  = RPG::SE.new("Coin", 100)
  
  # Sound effects when poker results are displayed[file name, Wait time, BGMStop(trueOr false)]
  #   BGMIf stop is true, stop BGM from the start of playback until the end of wait
  # No role (does not sound in normal time slot)
  SE_LOSE = ["Down1",         15, false]
  # One Pair - Two Pair Cherry
  SE_WIN1 = ["mon_fanfale" ,  80, false]
  # Three Cards - Full House Plum Bell
  SE_WIN2 = ["mon_fanfale2", 120, false]
  # Four Card ~ Five Card Watermelon BAR
  SE_WIN3 = ["mon_fanfale3", 330,  true]
  # ROYAL STRAIGHT FLASH 777
  SE_WIN4 = ["mon_fanfale4", 750,  true]
  
  # Volume of sound effect other than the above
  VOLUME_POKER_OTHER = 100   # Poker's \"entertainment/Poker remodeling \"Sound effect after line 101
                             # (SOUND_WINAnd SOUND_LOSEexcept for)
  
  # Winning Medal ID[Normal time, During battle]
  MEDAL_SLOT  = [2012, 2013]  # Slot 777
  MEDAL_POKER = [2014, 2015]  # Poker Royal Straight Flush
  
end

#==============================================================================
# ■ CasinoManager
#==============================================================================
module CasinoManager; end
class << CasinoManager
  #--------------------------------------------------------------------------
  # ● Setup
  #--------------------------------------------------------------------------
  def setup(minimum_coin)
    @minimum_coin = minimum_coin
    @bet_num = 0
  end
  #--------------------------------------------------------------------------
  # ● Acquire maximum bet
  #--------------------------------------------------------------------------
  def bet_max
    return 5
  end  
  #--------------------------------------------------------------------------
  # ● Increase wagers
  #--------------------------------------------------------------------------
  def add_bet
    return unless @bet_num < bet_max
    @bet_num += 1
    if over_bet? 
      @bet_num -= 1
    else
      NWConst::Casino::BET_SE.play
    end
  end
  #--------------------------------------------------------------------------
  # ● Reduce stakes
  #--------------------------------------------------------------------------
  def sub_bet
    return unless 0 < @bet_num
    @bet_num -= 1
    NWConst::Casino::BET_SE.play
  end
  #--------------------------------------------------------------------------
  # ● Increase the number of lines
  #--------------------------------------------------------------------------
  def add_line
    return unless @bet_num < bet_max
    @bet_num += 1
  end
  #--------------------------------------------------------------------------
  # ● Acquiring number of bets
  #--------------------------------------------------------------------------
  def bet_num
    return @bet_num
  end
  #--------------------------------------------------------------------------
  # ● Acquire minimum wager
  #--------------------------------------------------------------------------
  def minimum_coin
    return @minimum_coin
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of wager
  #--------------------------------------------------------------------------
  def bet_coin
    return @bet_num * @minimum_coin
  end
  #--------------------------------------------------------------------------
  # ● Is the wager over the possessed coin?
  #--------------------------------------------------------------------------
  def over_bet?
    return $game_party.coin < bet_coin
  end
  #--------------------------------------------------------------------------
  # ● Medal acquisition
  #--------------------------------------------------------------------------
  def process_medal(type, param, index)
    case type
    when :poker
      $game_library.gain_medal(NWConst::Casino::MEDAL_POKER[index]) if param == 10
    when :slot
      $game_library.gain_medal(param[index]) if param
    end
  end
  #--------------------------------------------------------------------------
  # ● Effect sound effect display
  #--------------------------------------------------------------------------
  def process_sound(type, param, wait_method)
    case type
    when :poker
      sound = 
        case param
        when 0;     NWConst::Casino::SE_LOSE
        when 1..2;  NWConst::Casino::SE_WIN1
        when 3..6;  NWConst::Casino::SE_WIN2
        when 7..9;  NWConst::Casino::SE_WIN3
        when 10;    NWConst::Casino::SE_WIN4
        end
    when :slot
      sound = param
    end
    if sound
      $game_system.save_bgm if sound[2]
      Audio.bgm_stop if sound[2]
      Audio.se_play("Audio/SE/" + sound[0])
      wait_method.call(sound[1])
      $game_system.replay_bgm if sound[2]
    end
  end
  #--------------------------------------------------------------------------
  # ● Result processing
  #--------------------------------------------------------------------------
  def slot_result
    hash = {}
    CasinoManager.bet_num.times do |i|
      $game_slot.check_bonus(NWConst::Slot::LINES[i])
      next if $game_slot.result_scale == 0
      hash[$game_slot.result_bonus[0]] ||= []
      hash[$game_slot.result_bonus[0]].push(i)
    end
    result = []
    hash.keys.sort.each do |key|
      result.push(hash[key])
    end
    return result
  end
end

#==============================================================================
# ■ Cache
#==============================================================================
class << Cache
  #--------------------------------------------------------------------------
  # ● Acquisition of graphics for casino
  #--------------------------------------------------------------------------
  def casino(filename)
    load_bitmap("Graphics/Casino/", filename)
  end
end

#==============================================================================
# ■ Game_Party
#==============================================================================
class Game_Party < Game_Unit
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #--------------------------------------------------------------------------
  attr_reader   :coin
  #--------------------------------------------------------------------------
  # ○ Object initialization
  #--------------------------------------------------------------------------
  alias nw_casino_initialize initialize
  def initialize
    nw_casino_initialize
    @coin = 0
  end
  #--------------------------------------------------------------------------
  # ● Increase (decrease) possession of coins
  #--------------------------------------------------------------------------
  def gain_coin(amount)
    @coin = [[@coin + amount, 0].max, max_coin].min
  end
  #--------------------------------------------------------------------------
  # ● Reduce possession of coins
  #--------------------------------------------------------------------------
  def lose_coin(amount)
    gain_coin(-amount)
  end
  #--------------------------------------------------------------------------
  # ● Get the maximum value of possession of coins
  #--------------------------------------------------------------------------
  def max_coin
    return 99999999
  end
end

#==============================================================================
# ■ Window_Coin
#==============================================================================
class Window_Coin < Window_Base
  #--------------------------------------------------------------------------
  # ● Object initialization
  #--------------------------------------------------------------------------
  def initialize
    super(Graphics.width - window_width, Graphics.height - window_height, window_width, window_height)
    self.z = 200
    @coin  = 0
    @interval = 0
    refresh
  end
  #--------------------------------------------------------------------------
  # ● Obtain window width
  #--------------------------------------------------------------------------
  def window_width
    return 160
  end
  #--------------------------------------------------------------------------
  # ● Obtain window height
  #--------------------------------------------------------------------------
  def window_height
    return fitting_height(2)
  end
  #--------------------------------------------------------------------------
  # ● Update processing
  #--------------------------------------------------------------------------
  def update
    super
    update_have_coin
  end
  #--------------------------------------------------------------------------
  # ● Refresh
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_have_coin
    draw_bet_coin
    @coin = $game_party.coin
  end
  #--------------------------------------------------------------------------
  # ● Update processing of owned coins
  #--------------------------------------------------------------------------
  def update_have_coin
    unless @coin == $game_party.coin
      sub = $game_party.coin - @coin
      @coin += 0 < sub ? [1, sub / 5].max : [-1, sub / 5].min
      rect  = Rect.new(0, 0, contents.width, line_height)      
      contents.clear_rect(rect)
      change_color(system_color)
      draw_text(rect, "Bal.", 0)
      change_color(normal_color)
      draw_text(rect, "#{@coin} cns.", 2)      
      NWConst::Casino::COIN_SE.play if (@interval % 10) == 0
      @interval += 1
    else
      @interval = 0
    end
  end  
  #--------------------------------------------------------------------------
  # ● Drawing possession of coins
  #--------------------------------------------------------------------------
  def draw_have_coin
    rect  = Rect.new(0, 0, contents.width, line_height)
    value = $game_party.coin
    change_color(system_color)
    draw_text(rect, "Bal.", 0)
    change_color(normal_color)
    draw_text(rect, "#{value} cns.", 2)
  end  
  #--------------------------------------------------------------------------
  # ● Draw betting coins
  #--------------------------------------------------------------------------
  def draw_bet_coin
    rect  = Rect.new(0, line_height, contents.width, line_height)
    value = CasinoManager.bet_coin
    change_color(system_color)
    draw_text(rect, "Bid", 0)
    change_color(normal_color)
    draw_text(rect, "#{value} cns.", 2)
  end  
end

#==============================================================================
# ■ Window_CasinoDesc
#==============================================================================
class Window_CasinoDesc < Window_Base
  #--------------------------------------------------------------------------
  # ● Object initialization
  #--------------------------------------------------------------------------
  def initialize
    super(0, Graphics.height - window_height, window_width, window_height)
    self.z = 200
  end
  #--------------------------------------------------------------------------
  # ● Obtain window width
  #--------------------------------------------------------------------------
  def window_width
    return 480
  end
  #--------------------------------------------------------------------------
  # ● Obtain window height
  #--------------------------------------------------------------------------
  def window_height
    return fitting_height(2)
  end
  #--------------------------------------------------------------------------
  # ● Text setting
  #--------------------------------------------------------------------------
  def set_text(text)
    if text != @text
      @text = text
      refresh
    end
  end
  #--------------------------------------------------------------------------
  # ● Clear
  #--------------------------------------------------------------------------
  def clear
    set_text("")
  end
  #--------------------------------------------------------------------------
  # ● Refresh
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_text_ex(4, 0, @text)
  end
end

#==============================================================================
# ■ Scene_CasinoBase
#==============================================================================
class Scene_CasinoBase < Scene_Base
  #--------------------------------------------------------------------------
  # ● Start processing
  #--------------------------------------------------------------------------
  def start
    super    
    create_background
    create_all_window
    change_phase(:stand)
  end
  #--------------------------------------------------------------------------
  # ● Termination processing
  #--------------------------------------------------------------------------
  def terminate
    super
    dispose_background
  end
  #--------------------------------------------------------------------------
  # ● Change of Phase
  #--------------------------------------------------------------------------
  def change_phase(phase)
    @phase = phase
  end
  #--------------------------------------------------------------------------
  # ● Create background
  #--------------------------------------------------------------------------
  def create_background
    @background_sprite = Sprite.new
    @background_sprite.bitmap = Cache.casino("casino_bg")
  end
  #--------------------------------------------------------------------------
  # ● Frame update (for weight)
  #--------------------------------------------------------------------------
  def abs_wait(duration)
    duration.times { update_basic }
  end
  #--------------------------------------------------------------------------
  # ● Create all windows
  #--------------------------------------------------------------------------
  def create_all_window
    create_desc_window
    create_coin_window
  end
  #--------------------------------------------------------------------------
  # ● Create a description window
  #--------------------------------------------------------------------------
  def create_desc_window
    @desc_window = Window_CasinoDesc.new
  end
  #--------------------------------------------------------------------------
  # ● Create a coin window
  #--------------------------------------------------------------------------
  def create_coin_window
    @coin_window = Window_Coin.new
  end
  #--------------------------------------------------------------------------
  # ● Release the background
  #--------------------------------------------------------------------------
  def dispose_background
    @background_sprite.dispose
  end
  #--------------------------------------------------------------------------
  # ● Update processing
  #--------------------------------------------------------------------------
  def update
    super
    case @phase
    when :stand;  update_stand
    when :play;   update_play
    end
  end
  #--------------------------------------------------------------------------
  # ● Update processing during standby
  #--------------------------------------------------------------------------
  def update_stand
    if Input.trigger?(:RIGHT)
      CasinoManager.add_bet
      @coin_window.refresh
    elsif Input.trigger?(:LEFT)
      CasinoManager.sub_bet
      @coin_window.refresh
    end
    return_scene if Input.trigger?(:B)
  end
  #--------------------------------------------------------------------------
  # ● Update processing during game
  #--------------------------------------------------------------------------
  def update_play
  end
  #--------------------------------------------------------------------------
  # ● Frame update (for weight)
  #--------------------------------------------------------------------------
  def update_for_wait
    update_basic
  end
  #--------------------------------------------------------------------------
  # ● Frame update (for weight)
  #--------------------------------------------------------------------------
  def wait(duration)
    update_basic
  end
  #--------------------------------------------------------------------------
  # ● Weight
  #--------------------------------------------------------------------------
  def wait(duration)
    duration.times {|i| update_for_wait if i < duration / 2 || !show_fast? }
  end
  #--------------------------------------------------------------------------
  # Fast Forward Judgment
  #--------------------------------------------------------------------------
  def show_fast?
    Input.press?(:A) || Input.press?(:C)
  end
end

#==============================================================================
# ■ Game_Interpreter
#==============================================================================
class Game_Interpreter
  #--------------------------------------------------------------------------
  # ● Calling the slot scene
  #--------------------------------------------------------------------------
  def call_slot_scene(bet_scale)
    CasinoManager.setup(bet_scale)
    SceneManager.call(Scene_Slot)
    Fiber.yield
  end
  #--------------------------------------------------------------------------
  # ● Call poker scene
  #--------------------------------------------------------------------------
  def call_poker_scene(bet_scale)
    CasinoManager.setup(bet_scale)
    SceneManager.call(Scene_Poker)
    Fiber.yield
  end
end









