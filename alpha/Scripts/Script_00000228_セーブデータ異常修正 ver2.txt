
=begin

Troublesome · ___ ___ 0 RPG
Save data error correction ver 2 2015/03/29

Function list description below this ver is newly added ● What you changed is ○ Delete is ×
· If you have learned skills as an ability, learn as a skill after forgetting
× Invalidation of withdrawal of some actors in retaliation at the Netherworld (judgment as to whether rematch is a variable)
× If there was a departure of a part actor in the Netherworld rematch defeat, join (also judged by a variable)

=end

#==============================================================================
# ■ Game_Temp
#==============================================================================
class Game_Temp
  #--------------------------------------------------------------------------
  # ● If the bugfix flag is not acquired, turn on the flag
  #--------------------------------------------------------------------------
  def bugfixed?(key)
    @bugfix ||= {}
    if @bugfix[key]
      return true
    else
      @bugfix[key] = true
      return false
    end
  end
  #--------------------------------------------------------------------------
  # ● Clear the bugfix flag
  #--------------------------------------------------------------------------
  def clear_bugfix_flag
    @bugfix = {}
  end
end

#==============================================================================
# ■ Scene_Title
#==============================================================================
class Scene_Title < Scene_Base
  #--------------------------------------------------------------------------
  # ● Start processing
  #--------------------------------------------------------------------------
  alias :clear_bugfix_flag_start :start
  def start
    $game_temp.clear_bugfix_flag
    clear_bugfix_flag_start
  end
end
#==============================================================================
# ■ Game_Actors
#==============================================================================
class Game_Actors
  #--------------------------------------------------------------------------
  # ● Acquisition of Actors
  #--------------------------------------------------------------------------
  def [](actor_id)
    return nil unless $data_actors[actor_id]
    @data[actor_id] ||= Game_Actor.new(actor_id)
    @data[actor_id].bugfix_learned_ability_type
    @data[actor_id]
  end
  #--------------------------------------------------------------------------
  # ○ Acquisition of actors
  #--------------------------------------------------------------------------
  alias nw_persona_array []
  def [](actor_id)
    return nil unless $data_actors[actor_id]
    actor = $data_actors[actor_id]
    id = (actor.persona_kind == :sub) ? actor.original_persona_id : actor_id
    nw_persona_array(id)
  end
end
#==============================================================================
# ■ Game_Actor
#==============================================================================
class Game_Actor < Game_Battler
  #--------------------------------------------------------------------------
  # ● Ability skill type modification
  #--------------------------------------------------------------------------
  def bugfix_learned_ability_type
    return if $game_temp.bugfixed?([:actor_learned_ability_type, id])
    NWConst::Ability::ABILITY_SKILL_TYPE.each do |ability_stype_id|
      @abilities[ability_stype_id].each do |skill_id|
        next if ability_stype_id == $data_skills[skill_id].stype_id
        @abilities[ability_stype_id].delete(skill_id)
        learn_skill(skill_id)
      end
    end
  end
endd