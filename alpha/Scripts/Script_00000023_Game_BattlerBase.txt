#==============================================================================
# ■ Game_BattlerBase
#------------------------------------------------------------------------------
# It is a basic class dealing with butler. It mainly includes the method of calculating the ability value. This
# The class is Game_Battler It is used as a superclass of the class.
#==============================================================================

class Game_BattlerBase
  #--------------------------------------------------------------------------
  # ● Constants (features)
  #--------------------------------------------------------------------------
  FEATURE_ELEMENT_RATE  = 11              # Attribute availability
  FEATURE_DEBUFF_RATE   = 12              # Weakness effectiveness
  FEATURE_STATE_RATE    = 13              # State availability
  FEATURE_STATE_RESIST  = 14              # State invalidation
  FEATURE_PARAM         = 21              # Normal ability value
  FEATURE_XPARAM        = 22              # Additional capacity value
  FEATURE_SPARAM        = 23              # Special capacity value
  FEATURE_ATK_ELEMENT   = 31              # Attack attribute
  FEATURE_ATK_STATE     = 32              # Attack state
  FEATURE_ATK_SPEED     = 33              # Attack speed correction
  FEATURE_ATK_TIMES     = 34              # Attack added times
  FEATURE_STYPE_ADD     = 41              # Skill type addition
  FEATURE_STYPE_SEAL    = 42              # Skill Type Seal
  FEATURE_SKILL_ADD     = 43              # Skill addition
  FEATURE_SKILL_SEAL    = 44              # Skill Seal
  FEATURE_EQUIP_WTYPE   = 51              # Weapon type equipment
  FEATURE_EQUIP_ATYPE   = 52              # Armor type equipment
  FEATURE_EQUIP_FIX     = 53              # Equipment fixation
  FEATURE_EQUIP_SEAL    = 54              # Equipment seal
  FEATURE_SLOT_TYPE     = 55              # Slot type
  FEATURE_ACTION_PLUS   = 61              # Add more action times
  FEATURE_SPECIAL_FLAG  = 62              # Special flag
  FEATURE_COLLAPSE_TYPE = 63              # Drop effect
  FEATURE_PARTY_ABILITY = 64              # Party ability
  #--------------------------------------------------------------------------
  # ● Constants (special flag)
  #--------------------------------------------------------------------------
  FLAG_ID_AUTO_BATTLE   = 0               # Automatic battle
  FLAG_ID_GUARD         = 1               # defense
  FLAG_ID_SUBSTITUTE    = 2               # Substitution
  FLAG_ID_PRESERVE_TP   = 3               # TPCarryover
  #--------------------------------------------------------------------------
  # ● Constants (Capacity Enhancement / Weak Body Icon Start Numbers)
  #--------------------------------------------------------------------------
  ICON_BUFF_START       = 64              # Enhancement (16 pieces)
  ICON_DEBUFF_START     = 80              # Weak body (16 pieces)
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #--------------------------------------------------------------------------
  attr_reader   :hp                       # HP
  attr_reader   :mp                       # MP
  attr_reader   :tp                       # TP
  #--------------------------------------------------------------------------
  # Access method by abbreviation of various ability values
  #--------------------------------------------------------------------------
  def mhp;  param(0);   end    # Maximum HP Maximum Hit Point
  def mmp;  param(1);   end    # Maximum MP Maximum Magic Point
  def atk;  param(2);   end    # Attack power ATtacK power
  def def;  param(3);   end    # Defense power DEFense power
  def mat;  param(4);   end    # Magic power Magic ATtack power
  def mdf;  param(5);   end    # Magic defense Magic DeFense power
  def agi;  param(6);   end    # Agility AGIlity
  def luk;  param(7);   end    # Luck of luck
  def hit;  xparam(0);  end    # Accuracy HIT rate
  def eva;  xparam(1);  end    # Evasion rate EVAsion rate
  def cri;  xparam(2);  end    # Conference rate CRItical rate
  def cev;  xparam(3);  end    # Concentration avoidance rate Critical EVasion rate
  def mev;  xparam(4);  end    # Magic evasion rate Magic EVasion rate
  def mrf;  xparam(5);  end    # Magic Reflection rate Magic ReFlection rate
  def cnt;  xparam(6);  end    # Counter attack rate
  def hrg;  xparam(7);  end    # HPPlayback rate Hp ReGeneration rate
  def mrg;  xparam(8);  end    # MPPlayback rate Mp ReGeneration rate
  def trg;  xparam(9);  end    # TPPlayback rate Tp ReGeneration rate
  def tgr;  sparam(0);  end    # Target ratio TarGet Rate
  def grd;  sparam(1);  end    # Defense effect rate GuaRD effect rate
  def rec;  sparam(2);  end    # Recovery effect rate RECovery effect rate
  def pha;  sparam(3);  end    # Medicine knowledge PHArmacology
  def mcr;  sparam(4);  end    # MPConsumption rate Mp Cost Rate
  def tcr;  sparam(5);  end    # TPCharge rate Tp Charge Rate
  def pdr;  sparam(6);  end    # Physical Damage Rate Physical Damage Rate
  def mdr;  sparam(7);  end    # Magical damage rate Magical Damage Rate
  def fdr;  sparam(8);  end    # Floor damage rate Floor Damage Rate
  def exr;  sparam(9);  end    # Experience Rate EXperience Rate
  #--------------------------------------------------------------------------
  # ● Object initialization
  #--------------------------------------------------------------------------
  def initialize
    @hp = @mp = @tp = 0
    @hidden = false
    clear_param_plus
    clear_states
    clear_buffs
  end
  #--------------------------------------------------------------------------
  # ● Clear the value to be added to the ability value
  #--------------------------------------------------------------------------
  def clear_param_plus
    @param_plus = [0] * 8
  end
  #--------------------------------------------------------------------------
  # ● Clear state information
  #--------------------------------------------------------------------------
  def clear_states
    @states = []
    @state_turns = {}
    @state_steps = {}
		
  end
  #--------------------------------------------------------------------------
  # ● Clear state
  #--------------------------------------------------------------------------
  def erase_state(state_id)
    @states.delete(state_id)
    @state_turns.delete(state_id)
    @state_steps.delete(state_id)
  end
  #--------------------------------------------------------------------------
  # ● Clear capacity enhancement information
  #--------------------------------------------------------------------------
  def clear_buffs
    @buffs = Array.new(8) { 0 }
    @buff_turns = {}
  end
  #--------------------------------------------------------------------------
  # ● State inspection
  #--------------------------------------------------------------------------
  def state?(state_id)
    @states.include?(state_id)
  end
  #--------------------------------------------------------------------------
  # ● Inspection of non-combat state
  #--------------------------------------------------------------------------
  def death_state?
    state?(death_state_id)
  end
  #--------------------------------------------------------------------------
  # ● Acquire state ID which can not fight
  #--------------------------------------------------------------------------
  def death_state_id
    return 1
  end
  #--------------------------------------------------------------------------
  # ● Get the current state as an array of objects
  #--------------------------------------------------------------------------
  def states
    @states.collect {|id| $data_states[id] }
  end
  #--------------------------------------------------------------------------
  # ● Get the current state as an array of icon numbers
  #--------------------------------------------------------------------------
  def state_icons
    icons = states.collect {|state| state.icon_index }
    icons.delete(0)
    icons
  end
  #--------------------------------------------------------------------------
  # ● Obtain the current reinforcement / weak body as an array of icon numbers
  #--------------------------------------------------------------------------
  def buff_icons
    icons = []
    @buffs.each_with_index {|lv, i| icons.push(buff_icon_index(lv, i)) }
    icons.delete(0)
    icons
  end
  #--------------------------------------------------------------------------
  # ● Reinforce / Get icon number corresponding to weakbody
  #--------------------------------------------------------------------------
  def buff_icon_index(buff_level, param_id)
    if buff_level > 0
      return ICON_BUFF_START + (buff_level - 1) * 8 + param_id
    elsif buff_level < 0
      return ICON_DEBUFF_START + (-buff_level - 1) * 8 + param_id 
    else
      return 0
    end
  end
  #--------------------------------------------------------------------------
  # ● Get array of all objects holding features
  #--------------------------------------------------------------------------
  def feature_objects
    states
  end
  #--------------------------------------------------------------------------
  # ● Get all array of feature objects
  #--------------------------------------------------------------------------
  def all_features
    feature_objects.inject([]) {|r, obj| r + obj.features }
  end
  #--------------------------------------------------------------------------
  # ● Array acquisition of feature objects (limited feature code)
  #--------------------------------------------------------------------------
  def features(code)
    all_features.select {|ft| ft.code == code }
  end
  #--------------------------------------------------------------------------
  # ● Array acquisition of feature objects (limits feature codes and data IDs)
  #--------------------------------------------------------------------------
  def features_with_id(code, id)
    all_features.select {|ft| ft.code == code && ft.data_id == id }
  end
  #--------------------------------------------------------------------------
  # ● Calculation of the sum of the feature values
  #--------------------------------------------------------------------------
  def features_pi(code, id)
    features_with_id(code, id).inject(1.0) {|r, ft| r *= ft.value }
  end
  #--------------------------------------------------------------------------
  # ● Calculation of sum total of feature values ​​(data ID specified)
  #--------------------------------------------------------------------------
  def features_sum(code, id)
    features_with_id(code, id).inject(0.0) {|r, ft| r += ft.value }
  end
  #--------------------------------------------------------------------------
  # ● Calculation of sum total of feature values ​​(data ID is not specified)
  #--------------------------------------------------------------------------
  def features_sum_all(code)
    features(code).inject(0.0) {|r, ft| r += ft.value }
  end
  #--------------------------------------------------------------------------
  # Compute set sum of features
  #--------------------------------------------------------------------------
  def features_set(code)
    features(code).inject([]) {|r, ft| r |= [ft.data_id] }
  end
  #--------------------------------------------------------------------------
  # ● Acquire basic value of normal ability value
  #--------------------------------------------------------------------------
  def param_base(param_id)
    return 0
  end
  #--------------------------------------------------------------------------
  # ● Obtain additional value of normal ability value
  #--------------------------------------------------------------------------
  def param_plus(param_id)
    @param_plus[param_id]
  end
  #--------------------------------------------------------------------------
  # ● Acquire minimum value of normal ability value
  #--------------------------------------------------------------------------
  def param_min(param_id)
    return 0 if param_id == 1  # MMP
    return 1
  end
  #--------------------------------------------------------------------------
  # ● Acquire maximum value of normal ability value
  #--------------------------------------------------------------------------
  def param_max(param_id)
    return 999999 if param_id == 0  # MHP
    return 9999   if param_id == 1  # MMP
    return 999
  end
  #--------------------------------------------------------------------------
  # ● Acquire rate of change of normal ability value
  #--------------------------------------------------------------------------
  def param_rate(param_id)
    features_pi(FEATURE_PARAM, param_id)
  end
  #--------------------------------------------------------------------------
  # ● Reinforcement of normal ability value / Acquisition of change rate due to weak body
  #--------------------------------------------------------------------------
  def param_buff_rate(param_id)
    @buffs[param_id] * 0.25 + 1.0
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of normal ability value
  #--------------------------------------------------------------------------
  def param(param_id)
		
    value = param_base(param_id) + param_plus(param_id)
    value *= param_rate(param_id) * param_buff_rate(param_id)
    [[value, param_max(param_id)].min, param_min(param_id)].max.to_i
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of additional ability value
  #--------------------------------------------------------------------------
  def xparam(xparam_id)
    features_sum(FEATURE_XPARAM, xparam_id)
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of special ability values
  #--------------------------------------------------------------------------
  def sparam(sparam_id)
    features_pi(FEATURE_SPARAM, sparam_id)
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of attribute validity
  #--------------------------------------------------------------------------
  def element_rate(element_id)
    features_pi(FEATURE_ELEMENT_RATE, element_id)
  end
  #--------------------------------------------------------------------------
  # ● Obtaining Weakness Effectiveness
  #--------------------------------------------------------------------------
  def debuff_rate(param_id)
    features_pi(FEATURE_DEBUFF_RATE, param_id)
  end
  #--------------------------------------------------------------------------
  # ● Obtain state availability
  #--------------------------------------------------------------------------
  def state_rate(state_id)
    features_pi(FEATURE_STATE_RATE, state_id)
  end
  #--------------------------------------------------------------------------
  # ● Get array of states to be invalidated
  #--------------------------------------------------------------------------
  def state_resist_set
    features_set(FEATURE_STATE_RESIST)
  end
  #--------------------------------------------------------------------------
  # ● Determination of invalidated state
  #--------------------------------------------------------------------------
  def state_resist?(state_id)
    state_resist_set.include?(state_id)
  end
  #--------------------------------------------------------------------------
  # ● Obtain Attack Attributes
  #--------------------------------------------------------------------------
  def atk_elements
    features_set(FEATURE_ATK_ELEMENT)
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of Attack State
  #--------------------------------------------------------------------------
  def atk_states
    features_set(FEATURE_ATK_STATE)
  end
  #--------------------------------------------------------------------------
  # Acquisition rate of attack state state
  #--------------------------------------------------------------------------
  def atk_states_rate(state_id)
    features_sum(FEATURE_ATK_STATE, state_id)
  end
  #--------------------------------------------------------------------------
  # Acquisition of attack speed correction
  #--------------------------------------------------------------------------
  def atk_speed
    features_sum_all(FEATURE_ATK_SPEED)
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of additional number of attacks
  #--------------------------------------------------------------------------
  def atk_times_add
    [features_sum_all(FEATURE_ATK_TIMES), 0].max
  end
  #--------------------------------------------------------------------------
  # ● Acquire additional skill type
  #--------------------------------------------------------------------------
  def added_skill_types
    features_set(FEATURE_STYPE_ADD)
  end
  #--------------------------------------------------------------------------
  # ● Determination of skill type seal
  #--------------------------------------------------------------------------
  def skill_type_sealed?(stype_id)
    features_set(FEATURE_STYPE_SEAL).include?(stype_id)
  end
  #--------------------------------------------------------------------------
  # ● Acquire additional skills
  #--------------------------------------------------------------------------
  def added_skills
    features_set(FEATURE_SKILL_ADD)
  end
  #--------------------------------------------------------------------------
  # ● Determination of skill seal
  #--------------------------------------------------------------------------
  def skill_sealed?(skill_id)
    features_set(FEATURE_SKILL_SEAL).include?(skill_id)
  end
  #--------------------------------------------------------------------------
  # ● Judgment that weapons can be equipped
  #--------------------------------------------------------------------------
  def equip_wtype_ok?(wtype_id)
    features_set(FEATURE_EQUIP_WTYPE).include?(wtype_id)
  end
  #--------------------------------------------------------------------------
  # ● Judgment that equipment can be equipped
  #--------------------------------------------------------------------------
  def equip_atype_ok?(atype_id)
    features_set(FEATURE_EQUIP_ATYPE).include?(atype_id)
  end
  #--------------------------------------------------------------------------
  # ● Judgment of fixed equipment
  #--------------------------------------------------------------------------
  def equip_type_fixed?(etype_id)
    features_set(FEATURE_EQUIP_FIX).include?(etype_id)
  end
  #--------------------------------------------------------------------------
  # ● Determination of Equipment Seal
  #--------------------------------------------------------------------------
  def equip_type_sealed?(etype_id)
    features_set(FEATURE_EQUIP_SEAL).include?(etype_id)
  end
  #--------------------------------------------------------------------------
  # ● Acquire slot type
  #--------------------------------------------------------------------------
  def slot_type
    features_set(FEATURE_SLOT_TYPE).max || 0
  end
  #--------------------------------------------------------------------------
  # ● Determination of two swords
  #--------------------------------------------------------------------------
  def dual_wield?
    slot_type == 1
  end
  #--------------------------------------------------------------------------
  # ● Obtain an array of action probability additional probabilities
  #--------------------------------------------------------------------------
  def action_plus_set
    features(FEATURE_ACTION_PLUS).collect {|ft| ft.value }
  end
  #--------------------------------------------------------------------------
  # ● Special flag determination
  #--------------------------------------------------------------------------
  def special_flag(flag_id)
    features(FEATURE_SPECIAL_FLAG).any? {|ft| ft.data_id == flag_id }
  end
  #--------------------------------------------------------------------------
  # ● Acquire extinction effect
  #--------------------------------------------------------------------------
  def collapse_type
    features_set(FEATURE_COLLAPSE_TYPE).max || 0
  end
  #--------------------------------------------------------------------------
  # ● Party ability judgment
  #--------------------------------------------------------------------------
  def party_ability(ability_id)
    features(FEATURE_PARTY_ABILITY).any? {|ft| ft.data_id == ability_id }
  end
  #--------------------------------------------------------------------------
  # ● Automatic combat determination
  #--------------------------------------------------------------------------
  def auto_battle?
    special_flag(FLAG_ID_AUTO_BATTLE)
  end
  #--------------------------------------------------------------------------
  # ● Judgment of defense
  #--------------------------------------------------------------------------
  def guard?
    special_flag(FLAG_ID_GUARD) && movable?
  end
  #--------------------------------------------------------------------------
  # ● Judgment of substitution
  #--------------------------------------------------------------------------
  def substitute?
    special_flag(FLAG_ID_SUBSTITUTE) && movable?
  end
  #--------------------------------------------------------------------------
  # ● Determination of carry over of TP
  #--------------------------------------------------------------------------
  def preserve_tp?
    special_flag(FLAG_ID_PRESERVE_TP)
  end
  #--------------------------------------------------------------------------
  # ● Addition of ability value
  #--------------------------------------------------------------------------
  def add_param(param_id, value)
    @param_plus[param_id] += value
    refresh
  end
  #--------------------------------------------------------------------------
  # ● HP change
  #--------------------------------------------------------------------------
  def hp=(hp)
    @hp = hp
    refresh
  end
  #--------------------------------------------------------------------------
  # ● Change of MP
  #--------------------------------------------------------------------------
  def mp=(mp)
    @mp = mp
    refresh
  end
  #--------------------------------------------------------------------------
  # ● HP increase / decrease (for events)
  #     value        : Increase / decrease value
  #     enable_death : Permit battle impossible
  #--------------------------------------------------------------------------
  def change_hp(value, enable_death)
    if !enable_death && @hp + value <= 0
      self.hp = 1
    else
      self.hp += value
    end
  end
  #--------------------------------------------------------------------------
  # ● Change of TP
  #--------------------------------------------------------------------------
  def tp=(tp)
    @tp = [[tp, max_tp].min, 0].max
  end
  #--------------------------------------------------------------------------
  # ● Get the maximum value of TP
  #--------------------------------------------------------------------------
  def max_tp
    return 100
  end
  #--------------------------------------------------------------------------
  # ● Refresh
  #--------------------------------------------------------------------------
  def refresh
    state_resist_set.each {|state_id| erase_state(state_id) }
    @hp = [[@hp, mhp].min, 0].max
    @mp = [[@mp, mmp].min, 0].max
    @hp == 0 ? add_state(death_state_id) : remove_state(death_state_id)
		
  end
  #--------------------------------------------------------------------------
  # ● Full Recovery
  #--------------------------------------------------------------------------
  def recover_all
    clear_states
    @hp = mhp
    @mp = mmp
  end
  #--------------------------------------------------------------------------
  # ● Acquire percentage of HP
  #--------------------------------------------------------------------------
  def hp_rate
    @hp.to_f / mhp
  end
  #--------------------------------------------------------------------------
  # ● Acquire percentage of MP
  #--------------------------------------------------------------------------
  def mp_rate
    mmp > 0 ? @mp.to_f / mmp : 0
  end
  #--------------------------------------------------------------------------
  # ● Acquire percentage of TP
  #--------------------------------------------------------------------------
  def tp_rate
    @tp.to_f / 100
  end
  #--------------------------------------------------------------------------
  # To hide
  #--------------------------------------------------------------------------
  def hide
    @hidden = true
  end
  #--------------------------------------------------------------------------
  # Appear
  #--------------------------------------------------------------------------
  def appear
    @hidden = false
  end
  #--------------------------------------------------------------------------
  # ● Obtain hidden state
  #--------------------------------------------------------------------------
  def hidden?
    @hidden
  end
  #--------------------------------------------------------------------------
  # ● Existence determination
  #--------------------------------------------------------------------------
  def exist?
    !hidden?
  end
  #--------------------------------------------------------------------------
  # ● Battle impossibility judgment
  #--------------------------------------------------------------------------
  def dead?
    exist? && death_state?
  end
  #--------------------------------------------------------------------------
  # ● Survival judgment
  #--------------------------------------------------------------------------
  def alive?
    exist? && !death_state?
  end
  #--------------------------------------------------------------------------
  # ● Normal judgment
  #--------------------------------------------------------------------------
  def normal?
    exist? && restriction == 0
  end
  #--------------------------------------------------------------------------
  # ● Command input possible judgment
  #--------------------------------------------------------------------------
  def inputable?
    normal? && !auto_battle?
  end
  #--------------------------------------------------------------------------
  # ● Action possible judgment
  #--------------------------------------------------------------------------
  def movable?
    exist? && restriction < 4
  end
  #--------------------------------------------------------------------------
  # ● Confusion status determination
  #--------------------------------------------------------------------------
  def confusion?
    exist? && restriction >= 1 && restriction <= 3
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of confusion level
  #--------------------------------------------------------------------------
  def confusion_level
    confusion? ? restriction : 0
  end
  #--------------------------------------------------------------------------
  # ● Determining whether it is an actor or not
  #--------------------------------------------------------------------------
  def actor?
    return false
  end
  #--------------------------------------------------------------------------
  # ● Determining whether it is an enemy character or not
  #--------------------------------------------------------------------------
  def enemy?
    return false
  end
  #--------------------------------------------------------------------------
  # ● Sort states
  #    Array@states In descending order of display priority.
  #--------------------------------------------------------------------------
  def sort_states
    @states = @states.sort_by {|id| [-$data_states[id].priority, id] }
  end
  #--------------------------------------------------------------------------
  # ● Acquire constraints
  #    Get the maximum restriction from the currently added state.
  #--------------------------------------------------------------------------
  def restriction
    states.collect {|state| state.restriction }.push(0).max
  end
  #--------------------------------------------------------------------------
  # ● Get the most important state continuation message
  #--------------------------------------------------------------------------
  def most_important_state_text
    states.each {|state| return state.message3 unless state.message3.empty? }
    return ""
  end
  #--------------------------------------------------------------------------
  # ● Do you have the necessary weapons for skill
  #--------------------------------------------------------------------------
  def skill_wtype_ok?(skill)
    return true
  end
  #--------------------------------------------------------------------------
  # ● MP calculation of skill consumption
  #--------------------------------------------------------------------------
  def skill_mp_cost(skill)
    (skill.mp_cost * mcr).to_i
  end
  #--------------------------------------------------------------------------
  # · Skill consumption TP calculation
  #--------------------------------------------------------------------------
  def skill_tp_cost(skill)
    skill.tp_cost
  end
  #--------------------------------------------------------------------------
  # ● Possible skill use cost can be paid
  #--------------------------------------------------------------------------
  def skill_cost_payable?(skill)
    tp >= skill_tp_cost(skill) && mp >= skill_mp_cost(skill)
  end
  #--------------------------------------------------------------------------
  # ● Payment of skill use costs
  #--------------------------------------------------------------------------
  def pay_skill_cost(skill)
    self.mp -= skill_mp_cost(skill)
    self.tp -= skill_tp_cost(skill)
  end
  #--------------------------------------------------------------------------
  # ● Skill / item check when available
  #--------------------------------------------------------------------------
  def occasion_ok?(item)
    $game_party.in_battle ? item.battle_ok? : item.menu_ok?
  end
  #--------------------------------------------------------------------------
  # ● Check common use conditions for skills / items
  #--------------------------------------------------------------------------
  def usable_item_conditions_met?(item)
    movable? && occasion_ok?(item)
  end
  #--------------------------------------------------------------------------
  # ● Check available conditions for skills
  #--------------------------------------------------------------------------
  def skill_conditions_met?(skill)
    usable_item_conditions_met?(skill) &&
    skill_wtype_ok?(skill) && skill_cost_payable?(skill) &&
    !skill_sealed?(skill.id) && !skill_type_sealed?(skill.stype_id)
  end
  #--------------------------------------------------------------------------
  # ● Check availability of items
  #--------------------------------------------------------------------------
  def item_conditions_met?(item)
    usable_item_conditions_met?(item) && $game_party.has_item?(item)
  end
  #--------------------------------------------------------------------------
  # ● Skill / item availability determination
  #--------------------------------------------------------------------------
  def usable?(item)
    return skill_conditions_met?(item) if item.is_a?(RPG::Skill)
    return item_conditions_met?(item)  if item.is_a?(RPG::Item)
    return false
  end
  #--------------------------------------------------------------------------
  # ● Equipment possibility judgment
  #--------------------------------------------------------------------------
  def equippable?(item)
    return false unless item.is_a?(RPG::EquipItem)
    return false if equip_type_sealed?(item.etype_id)
    return equip_wtype_ok?(item.wtype_id) if item.is_a?(RPG::Weapon)
    return equip_atype_ok?(item.atype_id) if item.is_a?(RPG::Armor)
    return false
  end
  #--------------------------------------------------------------------------
  # ● Acquire normal skill ID
  #--------------------------------------------------------------------------
  def attack_skill_id
    return 1
  end
  #--------------------------------------------------------------------------
  # ● Obtain defensive skill ID
  #--------------------------------------------------------------------------
  def guard_skill_id
    return 2
  end
  #--------------------------------------------------------------------------
  # ● Available judgment of ordinary attack
  #--------------------------------------------------------------------------
  def attack_usable?
    usable?($data_skills[attack_skill_id])
  end
  #--------------------------------------------------------------------------
  # ● Availability determination of defense
  #--------------------------------------------------------------------------
  def guard_usable?
    usable?($data_skills[guard_skill_id])
  end
end

