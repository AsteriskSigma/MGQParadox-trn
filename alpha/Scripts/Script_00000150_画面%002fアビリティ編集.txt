=begin
=Ability edit screen

KUREFollowing the memorize system and passive skills
We will provide an ability system conforming to the specifications of the antiperson RPG

==Change log
  Date     Version Author Comment
==15/09/03 2.0.2   Tris integration J ~ U K
==17/05/16 2.0.4   Tris integrated V ~ W W
==17/10/27 2.2.0   Sunflower bug fix

=end

#==============================================================================
# ■ NWConst::Ability
#==============================================================================
module NWConst::Ability
  ABILITY_SKILL_TYPE = [1, 2, 3, 4, 5]
  AP_NAME = "AP"
  REMOVE_SE = RPG::SE.new("Equip1")  
end

# Duplication prevention namespace
module Foo; module Ability; end; end


#==============================================================================
# ■ Game_Actor
#==============================================================================
class Game_Actor < Game_Battler
  attr_reader   :abilities
  attr_accessor   :equip_abilities
  #--------------------------------------------------------------------------
  # ○ Initialize skill
  #--------------------------------------------------------------------------
  alias nw_ability_init_skills init_skills
  def init_skills
    @abilities = {}
    @equip_abilities = {}
    NWConst::Ability::ABILITY_SKILL_TYPE.each{|stype_id|
      @abilities[stype_id] = []
      @equip_abilities[stype_id] = []
    }
    nw_ability_init_skills
  end
  #--------------------------------------------------------------------------
  # ○ Acquire array of skill objects
  #--------------------------------------------------------------------------
  alias nw_abilities skills
  def skills
    nw_abilities + all_abilities.collect{|id| $data_skills[id]}
  end
  #--------------------------------------------------------------------------
  # ○ Learning skills
  #--------------------------------------------------------------------------
  alias nw_ability_learn_skill learn_skill
  def learn_skill(skill_id)
    # Apply misleading setting regardless of skill / abilities
    return if $data_skills[skill_id].not_learn_actors.include?(self.actor.original_persona_id)

    stype_id = $data_skills[skill_id].stype_id
    if NWConst::Ability::ABILITY_SKILL_TYPE.include?(stype_id)
      @abilities[stype_id] |= [skill_id] 
      @abilities[stype_id].sort!
    else
      nw_ability_learn_skill(skill_id)
    end
  end
  #--------------------------------------------------------------------------
  # ○ Forget skills
  #--------------------------------------------------------------------------
  alias nw_ability_forget_skill forget_skill
  def forget_skill(skill_id)
    stype_id = $data_skills[skill_id].stype_id
    if NWConst::Ability::ABILITY_SKILL_TYPE.include?(stype_id)
      @abilities[stype_id].delete(skill_id)
    else
      nw_ability_forget_skill(skill_id)
    end
  end
  #--------------------------------------------------------------------------
  # ○ Mastery of skill acquisition
  #--------------------------------------------------------------------------
  alias nw_ability_skill_learn? skill_learn?
  def skill_learn?(skill)
    nw_ability_skill_learn?(skill) || (skill.is_skill? && all_equip_abilities.include?(skill.id))
  end
  #--------------------------------------------------------------------------
  # Obtaining the array of all objects holding features
  #--------------------------------------------------------------------------
  alias nw_ability_feature_objects feature_objects
  def feature_objects
    nw_ability_feature_objects + ability_feature_objects
  end
  #--------------------------------------------------------------------------
  # ● Characteristics of wearability Ability to acquire object
  #--------------------------------------------------------------------------  
  def ability_feature_objects
    all_equip_abilities.collect{|ability_id|
      $data_skills[ability_id].passive_armors.collect{|armor_id|
        $data_armors[armor_id]
      }
    }.flatten
  end
  #--------------------------------------------------------------------------
  # ● Acquire sequence of all ability ID
  #--------------------------------------------------------------------------  
  def all_abilities
    @abilities.values.flatten
  end
  #--------------------------------------------------------------------------
  # ● Acquire array of all wearable ability ID
  #--------------------------------------------------------------------------  
  def all_equip_abilities
    @equip_abilities.values.flatten
  end
  #--------------------------------------------------------------------------
  # ● Maximum AP acquisition
  #--------------------------------------------------------------------------  
  def max_ap(stype_id)
    self.class.memorize_capacity_revise[stype_id]
  end
  #--------------------------------------------------------------------------
  # ● Used AP acquisition
  #--------------------------------------------------------------------------  
  def ap(stype_id)
    @equip_abilities[stype_id].inject(0){|sum, id| sum += $data_skills[id].memorize_cost}
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of current AP rate
  #--------------------------------------------------------------------------    
  def ap_rate(stype_id)
    max_ap(stype_id) == 0 ? 0.0 : ap(stype_id) / max_ap(stype_id).to_f
  end
  #--------------------------------------------------------------------------
  # ● Change of wearability
  #--------------------------------------------------------------------------  
  def change_ability(index, ability_id)
    stype_id = $data_skills[ability_id].stype_id
    @equip_abilities[stype_id][index] = ability_id
  end
  #--------------------------------------------------------------------------
  # ● Remove wearability (ability type, Index specification)
  #--------------------------------------------------------------------------  
  def remove_ability_index(stype_id, index)
    @equip_abilities[stype_id].delete_at(index)
  end
  #--------------------------------------------------------------------------
  # ● Remove wearability (ability type designation)
  #--------------------------------------------------------------------------  
  def remove_ability_type(stype_id)
    @equip_abilities[stype_id].clear
  end
  #--------------------------------------------------------------------------
  # ● Remove all wearability
  #--------------------------------------------------------------------------  
  def remove_ability_all
    @equip_abilities.each_value{|value| value.clear}
  end
end

#==============================================================================
# ■ Foo::Ability::Window_StandAbility
#==============================================================================
class Foo::Ability::Window_StandAbility < Window_Command
  #--------------------------------------------------------------------------
  # ● Public instance variable
  #-------------------------------------------------------------------------
  attr_writer   :actor
  #--------------------------------------------------------------------------
  # ● Object Initialization
  #--------------------------------------------------------------------------
  def initialize
    @stype_id = 0
    @select_equip_id = 0
    super(Graphics.width / 2, 216)
    deactivate
    unselect
  end
  #--------------------------------------------------------------------------
  # ● Acquire Window Width
  #--------------------------------------------------------------------------
  def window_width
    Graphics.width / 2
  end
  #--------------------------------------------------------------------------
  # ● Acquire Window Height
  #--------------------------------------------------------------------------
  def window_height
    Graphics.height - 216 - fitting_height(1)
  end
  #--------------------------------------------------------------------------
  # ● There is no selectable ability?
  #--------------------------------------------------------------------------
  def empty?
    @list.empty?
  end  
  #--------------------------------------------------------------------------
  # ● Acquisition of selection ability ID
  #--------------------------------------------------------------------------
  def ability_id
    current_data[:name]
  end
  #--------------------------------------------------------------------------
  # ● Set skill type ID
  #--------------------------------------------------------------------------
  def stype_id=(id)
    @stype_id = id
    refresh
  end
  #--------------------------------------------------------------------------
  # ● Setting of wearing ability ID being selected
  #--------------------------------------------------------------------------
  def select_equip_id=(id)
    @select_equip_id = id
    refresh
  end
  #--------------------------------------------------------------------------
  # ● Create command list
  #--------------------------------------------------------------------------
  def make_command_list
    return if @stype_id == 0
    @actor.abilities[@stype_id].each{|stand_id|
      ap_cost   = $data_skills[stand_id].memorize_cost
      ap_cost  -= @actor.equip_abilities[@stype_id].inject(0){|sum, equip_id|
        sum += $data_skills[stand_id].not_jumble_memorize.include?(equip_id) ?
          $data_skills[equip_id].memorize_cost : 0        
      }
      if @select_equip_id != 0 && !$data_skills[stand_id].not_jumble_memorize.include?(@select_equip_id)
        ap_cost  -= $data_skills[@select_equip_id].memorize_cost 
      end
      disable   = @actor.equip_abilities[@stype_id].include?(stand_id)
      disable ||= @actor.max_ap(@stype_id) - @actor.ap(@stype_id) < ap_cost
      add_command(stand_id, :ok, !disable, $data_skills[stand_id].memorize_cost)
    }
  end
  #--------------------------------------------------------------------------
  # ● Drawing items
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect_for_text(index)
    ability = $data_skills[command_name(index)]
    draw_item_name(ability, rect.x, rect.y, command_enabled?(index))
    change_color(system_color)
    draw_text(rect, @list[index][:ext].to_s, 2)
  end
  #--------------------------------------------------------------------------
  # ● Update the help window
  #--------------------------------------------------------------------------
  def update_help
    super
    @help_window.set_item($data_skills[command_name(self.index)])
  end
end

#==============================================================================
# ■ Foo::Ability::Window_EquipAbility
#==============================================================================
class Foo::Ability::Window_EquipAbility < Window_Command
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #-------------------------------------------------------------------------
  attr_writer   :actor
  #--------------------------------------------------------------------------
  # ● Object initialization
  #--------------------------------------------------------------------------
  def initialize(stand_ability)
    @stand_ability = stand_ability
    @stype_id = 0
    super(0, 216)
    deactivate
    unselect
  end
  #--------------------------------------------------------------------------
  # ● Obtain window width
  #--------------------------------------------------------------------------
  def window_width
    Graphics.width / 2
  end
  #--------------------------------------------------------------------------
  # ● Obtain window height
  #--------------------------------------------------------------------------
  def window_height
    Graphics.height - 216 - fitting_height(1)
  end
  #--------------------------------------------------------------------------
  # ● Set skill type ID
  #--------------------------------------------------------------------------
  def stype_id=(id)
    @stype_id = id
    refresh
  end
  #--------------------------------------------------------------------------
  # ● Item Selection (Override)
  #--------------------------------------------------------------------------
  def select(index)
    super
    @stand_ability.select_equip_id = command_name(index) unless @list.empty?
  end  
  #--------------------------------------------------------------------------
  # ● Create command list
  #--------------------------------------------------------------------------
  def make_command_list
    return if @stype_id == 0
    @actor.equip_abilities[@stype_id].each{|equip_id|
      ap_cost = $data_skills[equip_id].memorize_cost
      add_command(equip_id, :ok, true, ap_cost)
    }
    add_command(0, :ok)
  end
  #--------------------------------------------------------------------------
  # ● Drawing items
  #--------------------------------------------------------------------------
  def draw_item(index)
#~     prefix_text = sprintf("%2d.", index + 1)
    prefix_text = "E:"
    rect = item_rect_for_text(index)
    change_color(normal_color)
    draw_text(rect, prefix_text)   
    return if command_name(index) == 0
    
    rect.x += text_size(prefix_text).width
    rect.width -= text_size(prefix_text).width
    ability = $data_skills[command_name(index)]
    draw_item_name(ability, rect.x, rect.y, command_enabled?(index))
    change_color(system_color)
    draw_text(rect, @list[index][:ext].to_s, 2)      
  end
  #--------------------------------------------------------------------------
  # ● Handling process such as decision and cancellation
  #--------------------------------------------------------------------------
  def process_handling
    return unless open? && active
    return process_ok       if ok_enabled?        && Input.trigger?(:C)
    return process_cancel   if cancel_enabled?    && Input.trigger?(:B)
    return process_extra    if handle?(:extra)    && Input.trigger?(:A)
    return process_pagedown if handle?(:pagedown) && Input.trigger?(:R)
    return process_pageup   if handle?(:pageup)   && Input.trigger?(:L)
  end
  #--------------------------------------------------------------------------
  # ● Processing when sub button is pressed
  #--------------------------------------------------------------------------
  def process_extra
    Input.update
    NWConst::Ability::REMOVE_SE.play
    call_handler(:extra)
  end
  #--------------------------------------------------------------------------
  # ● Update the help window
  #--------------------------------------------------------------------------
  def update_help
    super
    @help_window.set_item($data_skills[command_name(self.index)])
  end
  #--------------------------------------------------------------------------
  # ● Refresh
  #--------------------------------------------------------------------------
  def refresh
    super
    select(self.index)
  end
end

#==============================================================================
# ■ Foo::Ability::Window_AbilityType
#==============================================================================
class Foo::Ability::Window_AbilityType < Window_Selectable
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #-------------------------------------------------------------------------
  attr_writer   :actor
  #--------------------------------------------------------------------------
  # ● Object initialization
  #-------------------------------------------------------------------------
  def initialize(equip_ability, stand_ability)
    @equip_ability = equip_ability
    @stand_ability = stand_ability
    super(0, 72, Graphics.width, fitting_height(5))
    activate
    select(0)
  end
  #--------------------------------------------------------------------------
  # ● Acquisition of number of items
  #--------------------------------------------------------------------------
  def item_max
    NWConst::Ability::ABILITY_SKILL_TYPE.size
  end
  #--------------------------------------------------------------------------
  # ● Get the item width
  #--------------------------------------------------------------------------
  def item_width
    320
  end
  #--------------------------------------------------------------------------
  # ● Acquire selected skill type ID
  #--------------------------------------------------------------------------
  def stype_id
    return 0 if self.index == -1
    return NWConst::Ability::ABILITY_SKILL_TYPE[self.index]
  end  
  #--------------------------------------------------------------------------
  # ● Get rectangle to draw item
  #--------------------------------------------------------------------------
  def item_rect(index)
    rect = Rect.new
    rect.width = item_width
    rect.height = item_height
    rect.x = contents.width - item_width
    rect.y = index * item_height
    rect
  end
  #--------------------------------------------------------------------------
  # ● Drawing Actor Status
  #--------------------------------------------------------------------------  
  def draw_actor_status
    x = 0
    y = line_height
    draw_actor_face(@actor, x, y)    
    x  = 100
    y += line_height / 2
    draw_actor_name(@actor, x, y)

#~     rect = Rect.new(x, y, 120, line_height)
    rect = Rect.new(x, y, 150, line_height)
    reset_font_settings
    last_font = contents.font.size
    contents.font.size = 20
    rect.x += 150
    change_color(system_color)
    draw_text(rect, Vocab::level_a)
    rect.x += 22
    change_color(normal_color)
    draw_text(rect, sprintf("%2d", @actor.base_level))
    
    rect.x = 100; rect.y += line_height
    change_color(tp_gauge_color2)
    draw_text(rect, @actor.class.name)
    rect.x += 150
    change_color(system_color)
    draw_text(rect, Vocab::level_a)
    rect.x += 22
    change_color(normal_color)
    draw_text(rect, sprintf("%2d", @actor.class_level))
    
    rect.x = 100; rect.y += line_height
    change_color(mp_gauge_color2)
    draw_text(rect, @actor.tribe.name)
    rect.x += 150
    change_color(system_color)
    draw_text(rect, Vocab::level_a)
    rect.x += 22
    change_color(normal_color)
    draw_text(rect, sprintf("%2d", @actor.tribe_level))
    contents.font.size = last_font    
  end
  #--------------------------------------------------------------------------
  # ● Drawing items
  #--------------------------------------------------------------------------
  def draw_item(index)
    stype_id = @actor.abilities.keys[index]
    ability_name = $data_system.skill_types[stype_id]
    reset_font_settings
    draw_text(item_rect(index), ability_name)
    #
    x = item_rect(index).x + 190
    y = item_rect(index).y
    width = 120
    draw_gauge(x, y, width, @actor.ap_rate(stype_id), tp_gauge_color1, tp_gauge_color2)
    change_color(system_color)
    draw_text(x, y, width, line_height, NWConst::Ability::AP_NAME)
    text = sprintf("%2d/%2d", @actor.ap(stype_id), @actor.max_ap(stype_id))
    change_color(normal_color)
    draw_text(item_rect(index), text, 2)
  end
  #--------------------------------------------------------------------------
  # ● Item Selection (Override)
  #--------------------------------------------------------------------------
  def select(index)
    super
    @equip_ability.stype_id = stype_id
    @stand_ability.stype_id = stype_id
  end
  #--------------------------------------------------------------------------
  # ● Refresh
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_actor_status
    draw_all_items
  end
  #--------------------------------------------------------------------------
  # ● Handling process such as decision and cancellation
  #--------------------------------------------------------------------------
  def process_handling
    return unless open? && active
    return process_ok       if ok_enabled?        && Input.trigger?(:C)
    return process_cancel   if cancel_enabled?    && Input.trigger?(:B)
    return process_extra    if handle?(:extra)    && Input.trigger?(:A)
    return process_pagedown if handle?(:pagedown) && Input.trigger?(:R)
    return process_pageup   if handle?(:pageup)   && Input.trigger?(:L)
  end
  #--------------------------------------------------------------------------
  # ● Processing when sub button is pressed
  #--------------------------------------------------------------------------
  def process_extra
    Input.update
    NWConst::Ability::REMOVE_SE.play
    call_handler(:extra)
  end
end

#==============================================================================
# ■ Scene_Ability
#==============================================================================
class Scene_Ability < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● Start processing
  #--------------------------------------------------------------------------
  def start  
    super
    #create_help_window
    create_ability_help_window
    
    create_stand_ability_window
    create_equip_ability_window
    create_ability_type_window
    create_key_help_window
  end
  #--------------------------------------------------------------------------
  # ● Generate a waitability window
  #--------------------------------------------------------------------------
  def create_stand_ability_window
    @stand_ability_window = Foo::Ability::Window_StandAbility.new
    #@stand_ability_window.y = @ability_type_window.height
    @stand_ability_window.set_handler(:ok, method(:process_stand_ability_ok))
    @stand_ability_window.set_handler(:cancel, method(:process_stand_ability_cancel))
    @stand_ability_window.actor = @actor
    @stand_ability_window.help_window = @help_window
  end
  #--------------------------------------------------------------------------
  # ● Determination of standby abilities
  #--------------------------------------------------------------------------
  def process_stand_ability_ok
    stype_id   = @ability_type_window.stype_id
    index      = @equip_ability_window.index
    ability_id = @stand_ability_window.ability_id
    @actor.change_ability(index, ability_id)
    @actor.equip_abilities[stype_id].delete_if{|equip_id|
      $data_skills[ability_id].not_jumble_memorize.include?(equip_id)
    }    
    @stand_ability_window.unselect
    @equip_ability_window.activate
    @ability_type_window.refresh
    @equip_ability_window.refresh
    @stand_ability_window.refresh
    @equip_ability_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Cancellation of standby abilities
  #--------------------------------------------------------------------------
  def process_stand_ability_cancel
    @stand_ability_window.unselect
    @equip_ability_window.activate
    @equip_ability_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Generate wearable ability window
  #--------------------------------------------------------------------------
  def create_equip_ability_window
    @equip_ability_window = Foo::Ability::Window_EquipAbility.new(@stand_ability_window)
    #@equip_ability_window.y = @ability_type_window.height
    @equip_ability_window.set_handler(:ok, method(:process_equip_ability_ok))
    @equip_ability_window.set_handler(:cancel, method(:process_equip_ability_cancel))
    @equip_ability_window.set_handler(:extra, method(:process_equip_ability_remove))
    @equip_ability_window.actor = @actor
    @equip_ability_window.help_window = @help_window
  end
  #--------------------------------------------------------------------------
  # ● Determination of wearability
  #--------------------------------------------------------------------------
  def process_equip_ability_ok
    if @stand_ability_window.empty?
      @equip_ability_window.activate
      return
    end
    @stand_ability_window.activate
    @stand_ability_window.select(0)
    @stand_ability_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Cancellation of wearability abilities
  #--------------------------------------------------------------------------
  def process_equip_ability_cancel
    @equip_ability_window.unselect
    @stand_ability_window.select_equip_id = 0
    @stand_ability_window.select(0) unless @stand_ability_window.empty?
    @stand_ability_window.unselect
    @ability_type_window.activate
    @ability_type_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Delete wearability
  #--------------------------------------------------------------------------
  def process_equip_ability_remove
    @actor.remove_ability_index(@ability_type_window.stype_id, @equip_ability_window.index)
    @ability_type_window.refresh
    @equip_ability_window.refresh
    @stand_ability_window.refresh    
    @equip_ability_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Generate ability type window
  #--------------------------------------------------------------------------
  def create_ability_type_window
    @ability_type_window = 
      Foo::Ability::Window_AbilityType.new(@equip_ability_window, @stand_ability_window)
    # Added To Correct @help_window Being 4 Lines
    @ability_type_window.y = @help_window.height
    
    @ability_type_window.set_handler(:ok,   method(:process_ability_type_ok))
    @ability_type_window.set_handler(:cancel,   method(:return_scene))
    @ability_type_window.set_handler(:extra,   method(:process_ability_type_remove))
    @ability_type_window.set_handler(:pagedown, method(:next_actor))
    @ability_type_window.set_handler(:pageup,   method(:prev_actor))
    @ability_type_window.actor = @actor
    @ability_type_window.help_window = @help_window
    @ability_type_window.refresh
    @ability_type_window.update_help
    
    # Added To Correct @help_window Being 4 Lines
    @equip_ability_window.y = @help_window.height + @ability_type_window.height
    @stand_ability_window.y = @help_window.height + @ability_type_window.height
  end
  #--------------------------------------------------------------------------
  # Determination of ability type
  #--------------------------------------------------------------------------
  def process_ability_type_ok
    @ability_type_window.deactivate
    @equip_ability_window.activate
    @equip_ability_window.select(0)
    @equip_ability_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Delete Ability Type
  #--------------------------------------------------------------------------
  def process_ability_type_remove
    @actor.remove_ability_type(@ability_type_window.stype_id)
    @ability_type_window.refresh
    @equip_ability_window.refresh
    @stand_ability_window.refresh
  end
  #--------------------------------------------------------------------------
  # ● Generate operation help window
  #--------------------------------------------------------------------------
  def create_key_help_window
    @key_help_window = Window_Help.new(1)
    @key_help_window.y = Graphics.height - @key_help_window.fitting_height(1)
    @key_help_window.set_text(Help.ability_key)
  end
  #--------------------------------------------------------------------------
  # ● Switching actors
  #--------------------------------------------------------------------------
  def on_actor_change
    @equip_ability_window.actor = @actor
    @stand_ability_window.actor = @actor
    @ability_type_window.actor = @actor
    @ability_type_window.refresh
    @ability_type_window.activate
    @equip_ability_window.unselect
    @stand_ability_window.unselect
    @ability_type_window.select(0)
    @ability_type_window.update_help
  end
  #--------------------------------------------------------------------------
  # ● Return to caller's scene
  #--------------------------------------------------------------------------
  def return_scene
    $game_party.all_members.each{|member| member.refresh}
    super
  end
end

class Item_Data
	def initialize
		@item_number = 0
		@favorite_flag = false
		@item_object = nil
	end
end


