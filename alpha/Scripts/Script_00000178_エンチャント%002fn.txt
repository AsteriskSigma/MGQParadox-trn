

module NWConst::Var
	#Enchant rare degree variable number
	ENCHANT_RARELITY_ID = 150
end

module NWConst::Enchant
	
	#Weapons after this ID are treated as secret weapons.
	WEAPON_ID_BASE = 1000
	
	#Protectors after this ID are treated as secret protection.
	ARMOR_ID_BASE = 2500
	
end

module NWConst:Enchant
	#Maximum value of enhancement value
	MAX_PLUS_NUMBER = 99
end

#==============================================================================
# ■ Enchant_Item_List
#------------------------------------------------------------------------------
# Game_PartyClass for all item lists
#==============================================================================
class Enchant_Item_List < Item_List
	def [](index)
		index >= size ?  Item_Data.new : super(index)
	end
	def add_item(item)
		data = Item_Data.new
		data.item_object = item
		push(data)
	end
	
end

module Enchant_Item 
	attr_accessor :enchants         # Enchant ID array given
	attr_accessor :stones           # ID array of the stone being equipped
	attr_accessor :params_variance  # For value parameter obtained from variance value
	attr_accessor :plus_num         # Enhancement value
	attr_accessor :rarity_num       # Rare number
	attr_accessor :prefix           # prefix
	attr_accessor :enchant_variance_base # Variance value for enchantment
	attr_accessor :enchants_variance # For numerical enchantment acquired from variance value
	attr_accessor :socket_num       #Number of sockets
	attr_accessor :max_sp           # Maximum SP correction
	def initialize(item)
		super()
		@base_id = item.id
		@rarity_num = $game_variables[NWConst::Var::ENCHANT_RARELITY_ID]
	end
	#--------------------------------------------------------------------------
	# ● Reconfigure called when loading
	#--------------------------------------------------------------------------
	def reset_data
		set_param_variance unless @params_variance
		set_enchant_variance unless @enchants_variance
		set_data_ex
		set_features
		set_params
		set_bonus_max_sp
		
	end
	
	def set_data
		set_id
		set_param_variance
		set_enchant_variance
		set_data_ex
		set_enchants_fast
		set_features
		set_plus_num
		set_params
		set_prefix
		set_socket_num
		set_bonus_max_sp
		@stones = [nil] * @socket_num
	end
	#--------------------------------------------------------------------------
	# ● Arrangement of enchantment objects that are granted
	#--------------------------------------------------------------------------
	def enchants
		@enchants.map{|id|
			$data_classes[id]
		}
	end
	
	#--------------------------------------------------------------------------
	# ● Get features
	#--------------------------------------------------------------------------
	def set_features
		@base_features = base_data.features.map{|feature|calc_feature(feature)}
		@enchant_features = enchants.map{|enchant| 
			enchant.features.map{|feature|
				calc_feature(feature,enchant.id)
			}
		}
	end
	
	def features
		@base_features + @enchant_features.flatten
	end
	#--------------------------------------------------------------------------
	# ● Get dataex
	#--------------------------------------------------------------------------
	def set_data_ex
		@data_ex = base_data.data_ex
	end
	
	def calc_feature(feature,enchant_id = -1)
		temp = Marshal.load(Marshal.dump(feature))
		temp.value = set_value(temp.value,enchant_id)
		temp.enchant_id = enchant_id
		return temp
		
	end
	
	def set_value(data,enchant_id = -1)
		case data
		when Array
			return data.map{|d|set_value(d,enchant_id)}
		when Hash
			return data.inject({}){ |a,(k,v)| a[k] = set_value(v,enchant_id);a } 
		when Enchant_Value
			v = @enchant_variance_base
			@enchants_variance[enchant_id] ||= {}
			@enchants_variance[enchant_id][data.calc_id] ||= {} 
			@enchants_variance[enchant_id][data.calc_id][data.variance_id] ||= (100 + (-v .. v).to_a.sample) * 0.01
			v = @enchants_variance[enchant_id][data.calc_id][data.variance_id]
			return data.calculation(rarity_num.to_f,v)
		else
			return data
		end
	end
	
	def stones
		@stones.map{|stone| $data_items[stone] if stone}
	end
	
	def stones_armor_data
		stones.compact.map(&:enchant_stone_id).flatten.map{|armor_id| $data_armors[armor_id]}
	end
	
	def enchantment_data
		enchantment.each{|id ,data|
			case id
			when Range
				return data if id.include?(@base_id)
			when Numeric
				return data if id == @base_id
			end
		}
		nil
	end
	def plus_num= (value)
		@plus_num = value
		set_params
	end
	#--------------------------------------------------------------------------
	# ● Display color
	#--------------------------------------------------------------------------
	def display_color
		e = enchantment_data
		id = e.key?(:display_color) ? e[:display_color] : 0
		case id
		when 0
			0
		when 1
			23
		when 2
			6
		when 3
			2
		when 4
			11
		end
	end
	
	
	#--------------------------------------------------------------------------
	# ● Ignore prefix
	#--------------------------------------------------------------------------
	def not_prefix?
		e = enchantment_data
		e.key?(:not_prefix) ? e[:not_prefix] == 1 : false
	end
	#--------------------------------------------------------------------------
	# ● For moving ID
	#--------------------------------------------------------------------------
	def dec_id(delete_id)
		@id -= 1 if @id > delete_id 
		
	end
	#--------------------------------------------------------------------------
	# ● Original equipment data
	#--------------------------------------------------------------------------
	def base_data
		nil
	end
	
	#--------------------------------------------------------------------------
	# ● Give enchantment?
	#--------------------------------------------------------------------------
	def need_enchant?
		false
	end
	#--------------------------------------------------------------------------
	# ● Is it equipped with enchantment?
	#--------------------------------------------------------------------------
	def enchant_item?
		true
	end
	#--------------------------------------------------------------------------
	# ● Set unique ID
	#--------------------------------------------------------------------------
	def set_id
	end
	#--------------------------------------------------------------------------
	# ● Set enhancement value
	#--------------------------------------------------------------------------
	def set_plus_num
		@plus_num = NWConst::Enchantment::PLUS_NUM_DATA.select{|k,v| k.include?(rarity_num)}.map{|k,v| v }.sample.inject([]){|arr,(key,val)|arr + [key]* val}.sample
	end
	#--------------------------------------------------------------------------
	# ● Set the number of sockets
	#--------------------------------------------------------------------------
	def set_socket_num
		@socket_num = enchantment_data.select{|k,v| k.is_a?(Range) && k.include?(rarity_num)}.map{|k,v| v }.sample[:socket].inject([]){|arr,(key,val)|arr + [key]* val}.sample
	end
	#--------------------------------------------------------------------------
	# ● Set dispersion value
	#--------------------------------------------------------------------------
	def	set_param_variance
		v = NWConst::Enchantment::VARIANCE
		@params_variance =[0] * 8
		@params_variance.map!{|param| (100 + (-v .. v).to_a.sample)  * 0.01 }
	end
	
	def	set_enchant_variance
		v = NWConst::Enchantment::FEATURE_CALCULATION[:variance]
		@enchant_variance_base = v
		@enchants_variance = {}
	end
	
	#--------------------------------------------------------------------------
	# ● Set prefix
	#--------------------------------------------------------------------------
	def set_prefix
		prefixs = enchants.map{|e| e.prefix.sample }.compact
		rare_prefix = enchants.map{|e| e.rare_prefix.sample }.compact
		@prefix = rare_prefix.empty? ? prefixs.sample : rare_prefix.sample
	end
	#--------------------------------------------------------------------------
	# ● Set capability value
	#--------------------------------------------------------------------------
	def set_params
		@params = base_data.params.map.with_index{|param,index| 
			n = param.to_f
			r = @rarity_num
			eval(NWConst::Enchantment::BASE_PARAM).ceil * @params_variance[index]
		}.zip(bonus_params).map(&:max).map{|param| (param * get_final_bonus * (1 + 0.2 * plus_num)).to_i}
	end
	#--------------------------------------------------------------------------
	# ● Last Bonus
	#--------------------------------------------------------------------------
	def get_final_bonus
		set_value([final_bonus] + enchants.map(&:final_bonus)).max
	end
	#--------------------------------------------------------------------------
	# ● Bonus ability value
	#--------------------------------------------------------------------------
	def bonus_params
		enchants.inject([0]*8){|data,enchant|
			data.zip(set_value(enchant.bonus_params)).map(&:max)
		}
	end
	#--------------------------------------------------------------------------
	# ● Bonus sp setting
	#--------------------------------------------------------------------------
	def set_bonus_max_sp
		@max_sp =
		enchants.map{|enchant|
			set_value(enchant.bonus_max_sp)
		}.max
	end
	#--------------------------------------------------------------------------
	# ● Set enchantments to be granted
	#--------------------------------------------------------------------------
	def set_enchants
		@enchants =[]
		count = enchantment_data[:enchant_count].to_a.sample
		enchant_data = enchantment_data.select{|k,v| 
			k.is_a?(Range) && k.include?(@rarity_num)
		}.map{|k,v| v }.sample[:enchants].map{|id| 
			NWConst::Enchantment::ENCHANTS[id]
		}.inject({}){|h,d| 
			h.merge(d){
				|key,o,n| o+n 
			}
		}
		count.times{
			@enchants << set_enchant(enchant_data)
		}
	end
	
	def set_enchant(enchant_data)
		enchant_data = enchant_data.select{|id,par| can_enchant?(id,enchant_data)}
		return enchant_data.inject([]){|arr,(key,val)|arr + [key]* val}.sample
	end
	
	def can_enchant?(id, enchant_data)
		return false if @enchants.include?(id)
		return false if not_enchant_id.include?(id)
		return false if @enchants.any?{|id| $data_classes[id].both_disable.include?(id)}
		return false if @enchants.any?{|id| enchant_data.any? {|key,value| $data_classes[key].both_disable.include?(id)}}
		return true
	end
	
	def set_enchants_fast
		#For processing reduction
		@enchants =[]
		count = enchantment_data[:enchant_count].to_a.sample
		enchant_data = enchantment_data.select{|k,v| 
			k.is_a?(Range) && k.include?(@rarity_num)
		}.map{|k,v| v }.sample[:enchants].map{|id| 
			NWConst::Enchantment::ENCHANTS[id]
		}.inject({}){|h,d| 
			h.merge(d){
				|key,o,n| o+n 
			}
			
		}
		enchant_data.reject!{|id,par|not_enchant_id.include?(id)}
		set_enchant_fast(enchant_data,count)
	end
	
	def set_enchant_fast(enchant_data,count)
		return if count == 0
		return if enchant_data.empty?
		enchant_id = enchant_data.inject([]){|arr,(key,val)|arr + [key]* val}.sample
		add_enchant = $data_classes[enchant_id]
		enchant_data.reject!{|key,val| 
			enchant = $data_classes[key]
			add_enchant.both_disable.include?(key) || enchant.both_disable.include?(enchant_id) || key == enchant_id || (!enchant.rare_prefix.empty? && !add_enchant.rare_prefix.empty?)
		}
		@enchants << enchant_id
		set_enchant_fast(enchant_data,count-1)
	end
	
	#--------------------------------------------------------------------------
	# ○ Item name(0Hide)
	#--------------------------------------------------------------------------
	def name
		pre = not_prefix? ? "" : @prefix
		pre + base_data.name + plus_num_to_s
	end
	
	#--------------------------------------------------------------------------
	# ● Show strengthening value(0Hide)
	#--------------------------------------------------------------------------
	def plus_num_to_s
		plus_num > 0 ? "+#{plus_num}" : ""
	end
	
	#--------------------------------------------------------------------------
	# ● Enhancement value
	#--------------------------------------------------------------------------
	def plus_num
		[@plus_num,plus_num_max].min
	end
	
	#--------------------------------------------------------------------------
	# ● Maximum value of enhancement value
	#--------------------------------------------------------------------------
	def plus_num_max
		NWConst::Enchantment::MAX_PLUS_NUM
	end
	#--------------------------------------------------------------------------
	# ● Change secret stones
	#     slot_id : Equipment slot ID
	#     item    : Secret stone(nilIf you dismantle)
	#--------------------------------------------------------------------------
	def change_stone(slot_id, item)
		return unless trade_item_with_party(item, stones[slot_id])
		stones.each.with_index{|stone,index| change_stone(index,nil) if stone && index != slot_id && stone.enchant_stone_category == item.enchant_stone_category} if item
		@stones[slot_id] = item ? item.id : nil
	end
	
	#--------------------------------------------------------------------------
	# ● Remove all the secret stones
	#--------------------------------------------------------------------------
	def clear_stones
		socket_num.times{|i|
			change_stone(i, nil)
		}
	end
	
	
	#--------------------------------------------------------------------------
	# ● Exchange parties and items
	#     new_item : Items to remove from the party
	#     old_item : Items returned to the party
	#--------------------------------------------------------------------------
	def trade_item_with_party(new_item, old_item)
		return false if new_item && !$game_party.has_item?(new_item)
		$game_party.gain_item(old_item, 1)
		$game_party.lose_item(new_item, 1)
		return true
	end
	
	
	
	#Call original data
	def icon_index
		base_data.icon_index
	end
	def description
		base_data.description
	end
	def price
		base_data.price
	end
	def etype_id
		base_data.etype_id
	end
	def note
		base_data.note
	end 
end
class RPG::EnchantWeapon < RPG::Weapon
	include Enchant_Item
	
	def enchantment
		NWConst::Weapon::ENCAHNT_DATA
	end
	def sort_id
		-@id
	end
	def id 
		@id + $game_temp.weapons_size
	end
	def set_id
		@id = $game_party.enchant_weapons_data.size
	end
	def wtype_id
		base_data.wtype_id
	end
	def animation_id
		base_data.animation_id
	end
	#--------------------------------------------------------------------------
	# ● Data acquisition of former equipment
	#--------------------------------------------------------------------------
	def base_data
		$data_weapons[@base_id]
	end
	
end

class RPG::EnchantArmor <RPG::Armor
	include Enchant_Item
	def enchantment
		NWConst::Armor::ENCAHNT_DATA
	end
	def sort_id
		-@id
	end
	def id 
		@id + $game_temp.armors_size
	end
	def set_id
		@id = $game_party.enchant_armors_data.size
	end
	#Merely bringing back the original data
	def atype_id
		base_data.atype_id
	end
	#--------------------------------------------------------------------------
	# ● Data acquisition of former equipment
	#--------------------------------------------------------------------------
	def base_data
		$data_armors[@base_id]
	end
	
end





