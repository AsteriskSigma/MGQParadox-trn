
=begin

Troublesome · ___ ___ 0 RPG
Tris Battle Recollections ver10 2017/03/18

For the function list explanation below, what newly added with this ver is ● What you changed is ○
Battle Recollection
· Set whether to skip battle winning message automatically with 4 buttons in the configuration
· \"In Memo<Impossible to skip> In the battle with the enemy group to which the enemy belongs \"
Do not increase the number of extinctions of \"this adventure\" and \"all adventure\" at the time of defeat
· Enemy whose ID is 1001 to 2000 is \"<Battle recollection impossible>The same treatment as containing \"
● Switches that make it impossible to obtain each of experience value, money, and drop items at the time of victory

Feature Description
Battle Recollection
Event command script battle_memory Begin with
You can browse information as well as demon illustrations Select an enemy and enter a battle with a decision button

Battle Recapable enemies are \"victorious\" and \"enemy is not battle recollection\" enemies only
Battle not recollection Enemy: to memo<Battle recollection impossible>And whether the ID is 1001 to 2000
Randomly fight from the enemy group including the selected enemy and \"all enemies can recollect battle\"
An enemy whose enemy group is none can not start battle recollection

Escape possible
When winning, \"do not acquire experience value, money, drop item\" or \"join friend\"

· Set whether to skip battle winning message automatically with 4 buttons in the configuration
Initial state \"Do not skip\"
① Do not skip: Do not skip (v1.03.00Same as)
② Low speed skip: Weight a little for each character and weight like \"Fast skip\"
③ Fast skip: Experience value etc. are displayed for each line Weight for other display
④ Instant skipping: Do not wait at all (v1.02.01Same as before)


=end

#==============================================================================
# ■ Scene_Library
#==============================================================================
class Scene_Library < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● Demon Image Book/Whether to start from a character map book
  #--------------------------------------------------------------------------
  def ex_window_start?
    return false if $game_temp.in_memory_battle
    return $game_temp.lib_enemy_index != -1
  end
  #--------------------------------------------------------------------------
  # ● Demon Image Book/Cursor position when starting from a character illustration
  #--------------------------------------------------------------------------
  def start_index
    return $game_temp.lib_enemy_index % 10000 if $game_temp.lib_enemy_index != -1
    return 0
  end
  #--------------------------------------------------------------------------
  # ● Prepare the window settings
  #--------------------------------------------------------------------------
  def window_setting
    if ex_window_start?
      $game_temp.in_memory_battle = false
      play_bgm_no_save
      @main_command_window.category = $game_temp.lib_enemy_index < 10000 ? 2 : 1
      @main_command_window.refresh
      @main_command_window.select(start_index)
      @main_command_window.activate
      $game_temp.lib_enemy_index = -1
    else
      @main_command_window.select(0)
      @main_command_window.activate
    end
  end
  #--------------------------------------------------------------------------
  # ● Determination of a character book guide
  #--------------------------------------------------------------------------
  def on_actor_ok
    @enemy_command_window.enemy_id = @main_contents_window.ext % 10000 + 10000
    @enemy_command_window.refresh
    @enemy_command_window.show.activate
    @enemy_command_window.select(0)
  end
  #--------------------------------------------------------------------------
  # Determination of demon illustrations
  #--------------------------------------------------------------------------
  def on_enemy_ok
    @enemy_command_window.enemy_id = @main_contents_window.ext % 10000
    @enemy_command_window.refresh
    @enemy_command_window.show.activate
    @enemy_command_window.select(0)
  end
end
#==============================================================================
# ■ Scene_BattleLibrary
#==============================================================================
class Scene_BattleLibrary < Scene_Library
  #--------------------------------------------------------------------------
  # ● Demon Image Book/Whether to start from a character map book
  #--------------------------------------------------------------------------
  def ex_window_start?
    true
  end
  #--------------------------------------------------------------------------
  # ● Start processing
  #--------------------------------------------------------------------------
  def start
    super
    save_bgm
    $game_party.all_members.each {|actor| actor.recover_all }
    $game_player.refresh
  end
  #--------------------------------------------------------------------------
  # ● Save BGM
  #--------------------------------------------------------------------------
  def save_bgm
    @prev_bgm = RPG::BGM.last
    @prev_bgs = RPG::BGS.last
  end
  #--------------------------------------------------------------------------
  # ● Resume BGM and BGS
  #--------------------------------------------------------------------------  
  def replay_bgm_and_bgs
  end
  #--------------------------------------------------------------------------
  # ● BGM playing for return from combat recollection
  #--------------------------------------------------------------------------
  def play_bgm_no_save
    return unless @prev_bgm
    @prev_bgm.replay
    @prev_bgs.replay
  end
  #--------------------------------------------------------------------------
  # ● Create left column window
  #--------------------------------------------------------------------------
  def create_left_column_window
    @main_command_window = Window_BattleLibrary_MainCommand.new
    @main_command_window.set_handler(:lib_close,  method(:return_scene))
    @main_command_window.set_handler(:cancel,     method(:return_scene))
    @main_command_window.set_handler(:input_right, method(:on_next_page))
    @main_command_window.set_handler(:input_left,  method(:on_previous_page))
    @main_command_window.set_handler(:scrolldown,   method(:on_scroll_down))
    @main_command_window.set_handler(:scrollup,     method(:on_scroll_up))
    @main_command_window.set_handler(:on_enemy,     method(:on_enemy_ok))
    @main_command_window.index_window = @header_nav_window
    @main_command_window.contents_window = @main_contents_window      
    @main_command_window.help_window  = @footer_help_window
    on_enemy_index
  end
  #--------------------------------------------------------------------------
  # ● Create an enemy selection window
  #--------------------------------------------------------------------------
  def create_enemy_command_window
    @enemy_command_window = Window_BattleLibrary_EnemyCommand.new
    @enemy_command_window.set_handler(:memory_battle, method(:on_memory_battle))
    @enemy_command_window.set_handler(:cancel, method(:on_enemy_cancel))
  end
  #--------------------------------------------------------------------------
  # ● Demon: Battle Recollection
  #--------------------------------------------------------------------------
  def on_memory_battle
    $game_temp.in_memory_battle = true
    $game_temp.lib_enemy_index = @main_command_window.index
    troop_id = $game_temp.select_memory_battle_troop(@enemy_command_window.enemy.id)
    RPG::ME.stop
    BattleManager.setup(troop_id, true, false)
    BattleManager.save_bgm_and_bgs
    BattleManager.play_battle_bgm
    Sound.play_battle_start
    SceneManager.call(Scene_Battle)
  end
end
#==============================================================================
# ■ NWConst::Library
#----------------------------------------------------------------------------
# We mixin it to the window related to the illustration and use it.
#==============================================================================
module NWConst::Library
  #--------------------------------------------------------------------------
  # ● Constants
  #--------------------------------------------------------------------------
  INDEX_STRING = {
    :lib_top        => "Library",
    :lib_return     => "Return to Top",
    :lib_close      => "Close Library",
    :memory_close   => "End Scene",
    :lib_actor      => "Character Book",
    :lib_enemy      => "Monster Book",
    :lib_weapon     => "Weapon Book",
    :lib_armor      => "Armor Book",
    :lib_accessory  => "Accessory Book",
    :lib_item       => "Item Book",
    :lib_record     => "Adventure Log",
    :lib_medal      => "Achievements",
    :lib_class      => "Job Info",
    :lib_tribe      => "Race Info",
  }
end
#==============================================================================
# ■ Window_BattleLibrary_MainCommand
#==============================================================================
class Window_BattleLibrary_MainCommand < Window_Library_MainCommand
  #--------------------------------------------------------------------------
  # ● Update index window
  #--------------------------------------------------------------------------
  def update_index
    @index_window.set_text("#{INDEX_STRING[:lib_enemy]}(Battle Scene)\r\nPercent Complete:" + sprintf("%3d", collect_per_enemy) + "%")
  end
  #--------------------------------------------------------------------------
  # ● Back to Top(Return to display type selection)command
  #--------------------------------------------------------------------------
  def make_return_command
  end
  #--------------------------------------------------------------------------
  # ● Close the illustration(Return to the original scene)command
  #--------------------------------------------------------------------------
  def make_close_command
    add_command(INDEX_STRING[:memory_close], :lib_close, true, [-2, -20000])
  end
end
#==============================================================================
# ■ Window_BattleLibrary_EnemyCommand
#==============================================================================
class Window_BattleLibrary_EnemyCommand < Window_Library_EnemyCommand
  #--------------------------------------------------------------------------
  # ● Create command list
  #--------------------------------------------------------------------------
  def make_command_list
    return if disposed? or self.active
    add_command("Battle Scene",   :memory_battle, battle_memory?)
    add_command("Cancel", :cancel, true)
    self.height = fitting_height(2) unless disposed?
  end
  #--------------------------------------------------------------------------
  # ● Do you correspond to recollection events?
  #--------------------------------------------------------------------------  
  def battle_memory?
    return $game_temp.select_memory_battle_troop(enemy.id)
  end
end
#==============================================================================
# ■ Scene_Battle
#==============================================================================
class Scene_Battle < Scene_Base
  #--------------------------------------------------------------------------
  # ○ Termination processing infrastructure system/Novel Part
  #--------------------------------------------------------------------------
  def terminate
    super
    @spriteset.dispose_enemies
    SceneManager.snapshot_for_background
    dispose_spriteset
    @info_viewport.dispose
    unless BattleManager.memory_battle?
      RPG::ME.stop
    end
  end
end
#==============================================================================
# ■ BattleManager
#==============================================================================
class << BattleManager
  #--------------------------------------------------------------------------
  # ○ Battle recollection or not
  #--------------------------------------------------------------------------
  def memory_battle?
    $game_temp.in_memory_battle
  end
  #--------------------------------------------------------------------------
  # ○ Experience available?
  #--------------------------------------------------------------------------
  def enable_get_exp?
    return false if memory_battle?
    return false if $game_switches[NWConst::Sw::GET_DISABLE_EXP_DROP]
    return false if $game_switches[NWConst::Sw::GET_DISABLE_EXP]
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Is it possible to obtain gold?
  #--------------------------------------------------------------------------
  def enable_get_gold?
    return false if memory_battle?
    return false if $game_switches[NWConst::Sw::GET_DISABLE_GOLD]
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Drop items available?
  #--------------------------------------------------------------------------
  def enable_get_drop?
    return false if memory_battle?
    return false if $game_switches[NWConst::Sw::GET_DISABLE_EXP_DROP]
    return false if $game_switches[NWConst::Sw::GET_DISABLE_DROP]
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Do you do defeat counting
  #--------------------------------------------------------------------------
  def enable_party_lose_count?
    $game_troop.members.each do |enemy|
      return false if enemy.enemy.no_lose_skip?
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Treatment of victory
  #--------------------------------------------------------------------------
  def process_victory
    play_battle_end_me
    replay_bgm_and_bgs
    $game_temp.in_victory_message = true
    $game_message.add(sprintf(Vocab::Victory, $game_party.name))
    display_exp     if enable_get_exp?
    gain_gold       if enable_get_gold?
    gain_drop_items if enable_get_drop?
    gain_exp        if enable_get_exp?
    gain_love
    unless memory_battle?
      process_follow
    end
    if memory_battle?
      wait_for_message
    end
    $game_temp.in_victory_message = false
    SceneManager.return
    battle_end(0)
    unless memory_battle?
      DataManager.auto_save_game unless @event_proc
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Processing chart of victory/It disappears when count integration
  #--------------------------------------------------------------------------
  alias nw_count_process_victory process_victory
  def process_victory
    tmp = []
    $game_troop.members.each {|enemy| tmp.push(enemy.id) if enemy}
    $game_library.enemy.set_had(tmp) 
    $game_library.unlock_lib_enemy
    nw_count_process_victory
  end
  #--------------------------------------------------------------------------
  # ○ Processing base of defeat/Module
  #--------------------------------------------------------------------------
  def process_defeat
    if $game_temp.common_event_reserved?
      SceneManager.scene.process_common_event_on_defeat
    end
    $game_message.add(sprintf(Vocab::Defeat, $game_party.name))
    wait_for_message
    if @can_lose
      revive_battle_members
      replay_bgm_and_bgs
      SceneManager.return
    else
      # Normal game over is completely eliminated
      Audio.bgm_stop
      Audio.bgs_stop
      revive_battle_members
      unless memory_battle?
        $game_map.interpreter.clear
        reset_player
      end
      change_novel_scene
    end
    battle_end(2)
    return true
  end
  #--------------------------------------------------------------------------
  # ○ Handling of defeat/It disappears when count integration
  #--------------------------------------------------------------------------
  alias nw_count_process_defeat process_defeat
  def process_defeat
    tmp = []
    $game_troop.members.each {|enemy| tmp.push(enemy.id) if enemy}
    tmp.uniq.each{|id| $game_library.count_up_enemy_victory(id)}
    $game_library.enemy.set_discovery(tmp)
    if enable_party_lose_count?
      $game_library.count_up_party_lose
      $game_system.party_lose_count += 1
    end
    nw_count_process_defeat
  end
  #--------------------------------------------------------------------------
  # ● Transition to Novell Part
  #--------------------------------------------------------------------------  
  def change_novel_scene
    unless memory_battle?
      SceneManager.clear
      SceneManager.push(Scene_Map)
    end
    $game_novel.setup($game_troop.lose_event_id)
    SceneManager.goto(Scene_Novel)
    
    skip_flag = $game_system.conf[:ls_skip] == 1
    skip_flag &&= $game_library.lose_event_view?($game_novel.event_id)
    check_flag = $game_system.conf[:ls_skip] == 2
    choice = -1
    if no_lose_skip?
      skip_flag  = false
      check_flag = false
    end
    if check_flag
      $game_message.add("Skip Loss Scene?")
      ["Yes","No"].each {|s| $game_message.choices.push(s) }
      $game_message.choice_cancel_type = 2
      $game_message.choice_proc = Proc.new {|n| choice = n }
      wait_for_message
    end
    if no_lose_skip? and memory_battle?
      $game_novel.interpreter.memory_interruption
    elsif skip_flag || (choice == 0)
      $game_novel.interpreter.goto_ilias
    end
  end
end
#==============================================================================
# ■ RPG::Enemy
#==============================================================================
class RPG::Enemy < RPG::BaseItem
  #--------------------------------------------------------------------------
  # ○ Battle recollection is prohibited
  #--------------------------------------------------------------------------
  def no_memory_battle?
    return true if @note =~ /<Battle recollection impossible>/
    return true if ex_dungeon_enemy?
    return false
  end
end
#==============================================================================
# ■ Game_Temp
#==============================================================================
class Game_Temp
  #--------------------------------------------------------------------------
  # ● Public instance variables
  #--------------------------------------------------------------------------
  attr_accessor :in_memory_battle
  attr_accessor :in_victory_message
  #--------------------------------------------------------------------------
  # ○ Initialization of battle recollection group
  #--------------------------------------------------------------------------
  def clear_memory_battle_troop
    @memory_battle_troop = []
  end
  #--------------------------------------------------------------------------
  # ○ Battle recollection group selection
  #--------------------------------------------------------------------------
  def select_memory_battle_troop(enemy_id)
    setup_memory_battle_troop(enemy_id)
    return @memory_battle_troop[enemy_id].sample
  end
  #--------------------------------------------------------------------------
  # ○ Create battle recollection group
  #--------------------------------------------------------------------------
  def setup_memory_battle_troop(enemy_id)
    @memory_battle_troop[enemy_id] ||= make_memory_battle_troop(enemy_id)
  end
  #--------------------------------------------------------------------------
  # ○ Create battle recollection group
  #--------------------------------------------------------------------------
  def make_memory_battle_troop(enemy_id)
    return [] if no_memory_battle_1(enemy_id)
    return [] if no_memory_battle_2(enemy_id)
    troops = $data_troops.compact.select do |t|
      t.members.any? {|m| m.enemy_id == enemy_id }
    end
    troops.reject! {|t| t.members.any? {|m| no_memory_battle_1(m.enemy_id) } }
    troops.reject! {|t| t.members.any? {|m| no_memory_battle_2(m.enemy_id) } }
    return troops.map {|t| t.id }
  end
  #--------------------------------------------------------------------------
  # ○ Battle recollection is not enemy?
  #--------------------------------------------------------------------------
  def no_memory_battle_1(enemy_id)
    $data_enemies[enemy_id].no_memory_battle? ? true : false
  end
  #--------------------------------------------------------------------------
  # ○ Battle recollection is not enemy?
  #--------------------------------------------------------------------------
  def no_memory_battle_2(enemy_id)
    !$data_library.enemy_had?(enemy_id)
  end
end
#==============================================================================
# ■ Game_Interpreter
#==============================================================================
class Game_Interpreter
  #--------------------------------------------------------------------------
  # Start of battle recollection
  #--------------------------------------------------------------------------  
  def battle_memory
    $game_temp.clear_memory_battle_troop
    SceneManager.call(Scene_BattleLibrary)
    wait(1)
  end
  #--------------------------------------------------------------------------
  # ● Interruption if reminiscent
  #--------------------------------------------------------------------------
  def memory_interruption
    return if $game_temp.lib_enemy_index == -1  # \"Battle not from the illustration\" is invalid
    return if BattleManager.memory_battle?      # \"Battle recollection(An illustration)Battle 'is invalid
    # Only when it is other than (= defeat reminiscence from illustration)
    @index = @list.size
  end
end

#==============================================================================
# ■ Window_Config
#==============================================================================
class Window_Config < Window_Selectable
  #--------------------------------------------------------------------------
  # ● Get help text for item
  #--------------------------------------------------------------------------
  def help_text(index)
    text = CONTENTS[index][:help]
    text += "\r\n#{sub_help_text(index)}" if sub_exist?(index)
    text.gsub(/eval<(\S+)>/) { eval($1) }
  end
end
#==============================================================================
# ■ NWConst::Config
#==============================================================================
module NWConst::Config
  # Content of major item
  CONTENTS = [
    {:key => :window_tone,  :name => "Window Color", :sub => false,
     :help => "Change the Window Color"},  
    {:key => :sound_volume, :name => "Volume Settings", :sub => false,
     :help => "Change in-game volume."},
    {:key => :key_text,     :name => "Button Explanation", :sub => true,
     :help => "Change display of button help.\r\n←/→ Select"},
    {:key => :map_dash,     :name => "Auto Dash", :sub => true,
     :help => "【Map】 Change whether you walk or dash by default.\r\n←/→"},
    {:key => :map_speed,   :name => "Dash Speed", :sub => true,
     :help => "【Map】 Change dash speed.\r\n←/→ Slower/Faster"},
    {:key => :bt_skip,      :name => "Speech Cut-ins", :sub => true,
     :help => "【Battle】 Change display of battle speech cut-ins.\r\n←/→ Select"},
    {:key => :bt_auto,      :name => "Battle Log", :sub => true,
     :help => "【Battle】 Change battle log display setting.\r\n←/→ Select"},
    {:key => :bt_wait,      :name => "Battle Wait", :sub => true,
     :help => "【Battle】 Change battle wait settings.\r\n←/→ Select"},
    {:key => :bt_result,    :name => "Battle Result Speed", :sub => true,
     :help => "【Battle】 Change battle result speed when using button eval<Vocab.key_x>.\r\n←/→ Select"},   
    {:key => :bt_stype,     :name => "Display Skill Types", :sub => true,
     :help => "【Battle】 Change whether to display skill types in battle.\r\n←/→ Select"},
    {:key => :ls_auto,      :name => "Auto Advance Mode", :sub => true,
     :help => "[Defeat Event] Enable/Disable Auto Mode in H-Scenes.\r\n←/→ On/Off"},
    {:key => :ls_wait,      :name => "Auto Wait", :sub => true,
     :help => "【Defeat Event】 Change Auto Text Speed.\r\n←/→ Slower/Faster"},
    {:key => :ls_predation, :name => "Skip Vore Scenes", :sub => true,
     :help => "【Defeat Event】 Choose if to hide vore scenes.\r\n←/→ On/Off"},     
    {:key => :ls_skip,      :name => "Loss Events Skip", :sub => true,
     :help => "Change settings for loss events\r\n←/→ Select"},
    {:key => :default,      :name => "Defaults", :sub => false,
     :help => "Reset all settings to the default."},
    {:key => :return, :name => "Return", :sub => false,
     :help => "Return to Main Menu"},
  ]
  # Contents of a small item
  DATA = {
    :map_dash => [false, true],
    :map_speed => [0, 1, 2],
    :key_text => [:gamepad, :keyboard],
    :bt_skip => [false, true],
    :bt_auto => [false, true],
    :bt_wait => [100, 50, 25],
    :bt_result => [0, 1, 2, nil],
    :bt_stype => [false, true],
    :ls_auto => [false, true],
    :ls_wait => [10, 5, 3],
    :ls_predation => [false, true],
    :ls_skip => [0, 1, 2],
  }
  # Color data for color tone gauge
  TONE_COLOR = {
    :tone_r => Color.new(255, 0, 0),
    :tone_g => Color.new(0, 255, 0),
    :tone_b => Color.new(0, 0, 255),
  }
  # Data for volume gauge
  SOUND_GAUGE = {
    :volume_bgm => {:name => "BGM", :color => Color.new(255, 32, 32)},
    :volume_bgs => {:name => "BGS", :color => Color.new(255,192,  0)},
    :volume_me  => {:name => " ME", :color => Color.new(0, 192, 255)},
    :volume_se  => {:name => " SE", :color => Color.new(32, 32, 255)},
  }
  # Contents of small items
  DATA_TEXT = {
    :key_text => {
      :gamepad => {:name => "Gamepad", :help => "Display help using gamepad keys"},
      :keyboard => {:name => "Keyboard", :help => "Display help using keyboard keys"},
    },
    :map_dash => {
      false => {:name => "Walk", :help => "Walk by default"},
      true  => {:name => "Dash", :help => "Dash by default"},
    },
    :map_speed => {
      0 => {:name => "Normal", :help => "Normal dash speed"},
      1 => {:name => "Fast", :help => "Fast dash speed"},
      2 => {:name => "Fastest", :help => "Fastest dash speed"},      
    },
    :bt_skip => {
      false => {:name => "Display", :help => "Display battle lines and cut-ins"},
      true  => {:name => "Omit", :help => "Skip battle lines and cut-ins"},
    },
    :bt_auto => {
      false => {:name => "Manual", :help => "Manual advance for battle messages"},
      true  => {:name => "Auto", :help => "Automatic advance for battle messages"},
    },
    :bt_wait => {
      100 => {:name => "Normal", :help => "Default wait times in battle"},
      50 =>  {:name => "Fast", :help => "Half wait times in battle"},
      25 =>  {:name => "Fastest", :help => "Quarter wait times in battle"},      
    },
    :bt_result => {
      0   => {:name => "No Skip", :help => "Do not skip"},
      1   => {:name => "Slow", :help => "Wait on each character"},
      2   => {:name => "Fast", :help => "Wait on each line or page"},
      nil => {:name => "Instant", :help => "Skip all at once"},
    },
    :bt_stype => {
      true => {:name => "Hide", :help => "Hide selected skill types in battle"},
      false  => {:name => "Show all", :help => "Display all skill types in battle"},
    },
    :ls_auto => {
      false => {:name => "Off", :help => "Do not use auto mode during scenes"},
      true  => {:name => "On", :help => "Use auto mode during scenes"},
    },
    :ls_wait => {
      10 => {:name => "Slow", :help => "Pause twice as long during scenes"},
      5 =>  {:name => "Normal", :help => "Use default timings during scenes"},
      3 =>  {:name => "Fast", :help => "Pause half as long during scenes"},      
    },
    :ls_predation => {
      false => {:name => "Watch", :help => "Display vore scenes"},
      true  => {:name => "Skip", :help => "Skip vore scenes"},
    },
    :ls_skip => {
      0 => {:name => "Always View", :help => "Always show loss scenes"},
      1 => {:name => "Skip Already Seen", :help => "Only show new loss scenes"},
      2 => {:name => "Always Ask", :help => "Ask whether to show each loss scene"},
    },
  }
  # Specified value
  DEFAULT = {
    :tone_r => -34,
    :tone_g =>   0,
    :tone_b =>  68,
    :volume_bgm => 70,
    :volume_bgs => 70,
    :volume_se => 70,
    :volume_me => 70,
    :key_text => :gamepad,
    :map_dash => false,
    :map_speed => 0,
    :bt_skip => false,
    :bt_auto => false,
    :bt_wait => 100,
    :bt_result => nil,
    :bt_stype => true,
    :ls_auto => false,
    :ls_wait => 5,
    :ls_predation => false,
    :ls_skip => 0,
  }
end
#==============================================================================
# ■ Window_Message
#==============================================================================
class Window_Message < Window_Base
  #--------------------------------------------------------------------------
  # ○ Skip mode
  #--------------------------------------------------------------------------
  def message_skip_mode
    #     0: Do not skip
    #     1: Slow skipping
    #     2: Fast skip
    # nil 3: Instant skipping (normal time)
    return 3 if !$game_temp.in_victory_message
    return $game_system.conf[:bt_result] || 3
  end
  #--------------------------------------------------------------------------
  # ○ input_pauseOf wait(10)Later character feed input
  #--------------------------------------------------------------------------
  def message_pause_input
    input_x = Input.trigger?(:X)
    input_x = Input.press?(:X) if message_skip_mode >= 1
    return Input.trigger?(:B) || Input.trigger?(:C) || input_x
  end
  #--------------------------------------------------------------------------
  # ○ Weight
  #--------------------------------------------------------------------------
  def wait(duration)
    return if Input.press?(:X) and message_skip_mode >= 3
    duration.times { Fiber.yield }
  end
  #--------------------------------------------------------------------------
  # ○ Weight after one character output
  #--------------------------------------------------------------------------
  def wait_for_one_character
    return if Input.press?(:X) and message_skip_mode >= 2
    update_show_fast
    Fiber.yield unless @show_fast || @line_show_fast
  end
  #--------------------------------------------------------------------------
  # ○ Wait for input
  #--------------------------------------------------------------------------
  def input_pause
    return if Input.press?(:X) and message_skip_mode >= 3
    self.pause = true
    wait(10)
    Fiber.yield until message_pause_input
    Input.update
    self.pause = false
  end
endd