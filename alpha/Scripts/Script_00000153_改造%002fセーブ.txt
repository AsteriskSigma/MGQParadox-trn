=begin
=Remodeling/save




==Change log
  Date     Version Author Comment

=end

#==============================================================================
# ■ DataManager
#==============================================================================
class << DataManager
  #--------------------------------------------------------------------------
  # ○ Module initialization
  #--------------------------------------------------------------------------
  def init
    @last_savefile_index = 0
    create_game_objects
    setup_battle_test if $BTEST
  end
  #--------------------------------------------------------------------------
  # ● Acquire system file name
  #--------------------------------------------------------------------------
  def system_filename
    return "Save/SystemSave.rvdata2"
  end  
  #--------------------------------------------------------------------------
  # ● Obtain system backup file name
  #--------------------------------------------------------------------------
  def system_backup_filename
    return "Save/SystemSaveBackup.rvdata2"
  end  
  #--------------------------------------------------------------------------
  # ● Initialization of system data
  #--------------------------------------------------------------------------
  def setup_system
    return if system_object_exist?
    if system_file_exist?
      load_system 
    else
      create_system_objects
    end
    $game_library.make_preparation_list
  end
  #--------------------------------------------------------------------------
  # Is there a system object?
  #--------------------------------------------------------------------------
  def system_object_exist?
    return ($game_library && $game_system_switches)
  end
  #--------------------------------------------------------------------------
  # ● System file exists?
  #--------------------------------------------------------------------------
  def system_file_exist?
    return File.exist?(system_filename)
  end
  #--------------------------------------------------------------------------
  # ● Execute System Save
  #--------------------------------------------------------------------------
  def save_system
    return false unless system_object_exist?
    
    p "Execution of system save" if $TEST 
    begin
      Dir.mkdir("Save") unless Dir.exist?("Save")
      @system_save_count += 1
      save_system_without_rescue
      save_system_backup_without_rescue if @system_save_count % 3 == 0
      true
    rescue
      false
    end
  end
  #--------------------------------------------------------------------------
  # ● Execute system load
  #--------------------------------------------------------------------------
  def load_system
    p "Execute system load" if $TEST 
    load_system_without_rescue rescue false
  end
  #--------------------------------------------------------------------------
  # ● Execute system backup save (no exception handling)
  #--------------------------------------------------------------------------
  def save_system_backup_without_rescue
    File.open(system_backup_filename, "wb") do |file|
      Marshal.dump(make_system_save_contents, file)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● System save execution (no exception processing)
  #--------------------------------------------------------------------------
  def save_system_without_rescue
    File.open(system_filename, "wb") do |file|
      Marshal.dump(make_system_save_contents, file)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● Execute system load (no exception handling)
  #--------------------------------------------------------------------------
  def load_system_without_rescue
    File.open(system_filename, "rb") do |file|
      extract_system_save_contents(Marshal.load(file))
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● Create system save contents
  #--------------------------------------------------------------------------
  def make_system_save_contents
    contents = {}
    contents[:system_save_count]  = @system_save_count
    contents[:library]            = $game_library
    contents[:system_switches]    = $game_system_switches
    contents
  end
  #--------------------------------------------------------------------------
  # ● Expanding system save contents
  #--------------------------------------------------------------------------
  def extract_system_save_contents(contents)
    @system_save_count    = contents[:system_save_count].nil? ? 0 : contents[:system_save_count]
    $game_library         = contents[:library].nil? ? Game_Library.new : contents[:library]
    $game_system_switches = contents[:system_switches].nil? ? Game_SystemSwitches.new : contents[:system_switches]
  end  
  #--------------------------------------------------------------------------
  # ● Creation of various system objects
  #--------------------------------------------------------------------------
  def create_system_objects
    p "Generate system object" if $TEST 
    @system_save_count    = 0
    $game_library         = Game_Library.new
    $game_system_switches = Game_SystemSwitches.new
  end
  #--------------------------------------------------------------------------
  # ○ Existence determination of saved file
  #--------------------------------------------------------------------------
  def save_file_exists?
    !Dir.glob('Save/Save*.rvdata2').empty?
  end
  #--------------------------------------------------------------------------
  # ○ Maximum number of save files
  #--------------------------------------------------------------------------
  def savefile_max
    return 99
  end  
  #--------------------------------------------------------------------------
  # ○ Create file name
  #     index : File index
  #--------------------------------------------------------------------------
  def make_filename(index)
    sprintf("Save/Save%02d.rvdata2", index + 1)
  end  
  #--------------------------------------------------------------------------
  # ○ Execute Save
  #--------------------------------------------------------------------------
  def save_game(index)
    begin
      Dir.mkdir("Save") unless Dir.exist?("Save")
      save_game_without_rescue(index)
      save_thumbnail(sprintf("Save/Save%02d", index + 1))
      if $game_system.save_count % 5 == 0
        save_game_backup_without_rescue
        save_thumbnail("Save/SaveBackup")
      end
      true
    rescue
      delete_save_file(index)
      false
    end
  end
  #--------------------------------------------------------------------------
  # ○ Create save header
  #--------------------------------------------------------------------------
  def make_save_header
    header = {}
    header[:characters] = $game_party.characters_for_savefile
    header[:playtime_s] = $game_system.playtime_s
    header[:realtime_s] = $game_system.realtime_s
    header[:luca_level] = $game_actors[NWConst::Actor::LUCA].base_level
    header
  end
  #--------------------------------------------------------------------------
  # ● Execute backup save (no exception handling)
  #--------------------------------------------------------------------------
  def save_game_backup_without_rescue
    File.open("Save/SaveBackup.rvdata2", "wb") do |file|
      Marshal.dump(make_save_header, file)
      Marshal.dump(make_save_contents, file)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ● Create thumbnail images
  #--------------------------------------------------------------------------
  def make_thumbnail
    @thumbnails = {}
    @current_thumbnail = nil
    @dummy_thumbnail = nil
    src_bitmap = SceneManager.background_bitmap
    @current_thumbnail = Bitmap.new(160, 120)
    @current_thumbnail.stretch_blt(@current_thumbnail.rect, src_bitmap, src_bitmap.rect)
    @dummy_thumbnail = Bitmap.new(160, 120)
    @dummy_thumbnail.fill_rect(@dummy_thumbnail.rect, Color.new(0, 0, 0))
    
    Dir.mkdir("Save") unless Dir.exist?("Save")
    Dir.entries("Save").each{|file_name|
      next unless file_name =~ /Save(\d+)\.png/i
      @thumbnails[$1.to_i - 1] = Bitmap.new("Save/" + file_name)
    }
  end
  #--------------------------------------------------------------------------
  # ● Release thumbnail images
  #--------------------------------------------------------------------------
  def dispose_thumbnail
    @current_thumbnail.dispose
    @dummy_thumbnail.dispose
    @thumbnails.each_value{|thumbnail| thumbnail.dispose}
    @current_thumbnail = nil
    @dummy_thumbnail = nil
    @thumbnails = {}
  end
  #--------------------------------------------------------------------------
  # ● Acquire thumbnail image now
  #--------------------------------------------------------------------------
  def get_current_thumbnail
    return @current_thumbnail
  end  
  #--------------------------------------------------------------------------
  # ● Acquisition of dummy thumbnail image
  #--------------------------------------------------------------------------
  def get_dummy_thumbnail
    return @dummy_thumbnail
  end  
  #--------------------------------------------------------------------------
  # ● Acquire thumbnail image
  #--------------------------------------------------------------------------
  def get_thumbnail(index)
    return @thumbnails[index]
  end  
  #--------------------------------------------------------------------------
  # ● Change thumbnail image
  #--------------------------------------------------------------------------
  def change_thumbnail(index)
    @thumbnails[index].dispose if @thumbnails[index]
    bitmap = Bitmap.new(160, 120)
    bitmap.blt(0, 0, @current_thumbnail, bitmap.rect) 
    @thumbnails[index] = bitmap
  end
  #--------------------------------------------------------------------------
  # ● Save thumbnail images
  #--------------------------------------------------------------------------
  def save_thumbnail(file_name)
    @current_thumbnail.make_png(file_name)
  end
end

#==============================================================================
# ■ Game_Party
#==============================================================================
class Game_Party < Game_Unit
  #--------------------------------------------------------------------------
  # ○ Character image information for save file display
  #--------------------------------------------------------------------------
  def characters_for_savefile
    all_members.collect do |actor|
      [actor.character_name, actor.character_index]
    end
  end  
end

#==============================================================================
# ■ Window_SaveFile
#==============================================================================
class Window_SaveFile < Window_Base
  #--------------------------------------------------------------------------
  # ○ Refresh
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_thumbnail(0, 0)
    draw_filename(164, 0)
    draw_realtime(164, 0, contents.width - 164, 2)
    draw_party_characters(164, contents.height - line_height - 4)
    draw_level(164, contents.height - line_height, contents.width - 164, 0)
    draw_playtime(164, contents.height - line_height, contents.width - 164, 2)
  end
  #--------------------------------------------------------------------------
  # ● Drawing thumbnails
  #--------------------------------------------------------------------------
  def draw_thumbnail(x, y)
    thumbnail = DataManager.get_thumbnail(@file_index)
    thumbnail ||= DataManager.get_dummy_thumbnail
    contents.blt(x, y, thumbnail, thumbnail.rect) 
  end  
  #--------------------------------------------------------------------------
  # ● Drawing a file name
  #--------------------------------------------------------------------------
  def draw_filename(x, y)
    change_color(normal_color)
    name = Vocab::File + " #{@file_index + 1}"
    draw_text(x, y, 200, line_height, name)
    @name_width = text_size(name).width
  end
  #--------------------------------------------------------------------------
  # ○ Draw a party character
  #--------------------------------------------------------------------------
  def draw_party_characters(x, y)
    header = DataManager.load_header(@file_index)
    return unless header
    
    header[:characters].each{|data|
      character_name = data[0]
      n = data[1]
      bitmap = Cache.character(character_name)
      sign = character_name[/^[\!\$]./]
      if sign && sign.include?('$')
        cw = bitmap.width / 3
        ch = bitmap.height / 4
      else
        cw = bitmap.width / 12
        ch = bitmap.height / 8
      end
      src_rect = Rect.new((n%4*3+1)*cw, (n/4*4)*ch, cw, ch)
      contents.blt(x, y - ch, bitmap, src_rect)
      x += cw
    }
  end
  #--------------------------------------------------------------------------
  # ○ Drawing play time
  #--------------------------------------------------------------------------
  def draw_playtime(x, y, width, align)
    header = DataManager.load_header(@file_index)
    return unless header
    text = sprintf("Playtime:%s", header[:playtime_s])
    draw_text(x, y, width, line_height, text, align)
  end
  #--------------------------------------------------------------------------
  # ● Drawing the level of Luca
  #--------------------------------------------------------------------------
  def draw_level(x, y, width, align)
    header = DataManager.load_header(@file_index)
    return unless header
    text = sprintf("Luka Level:%s", header[:luca_level])
    draw_text(x, y, width, line_height, text, align)
  end
  #--------------------------------------------------------------------------
  # ● Real time drawing
  #--------------------------------------------------------------------------
  def draw_realtime(x, y, width, align)
    header = DataManager.load_header(@file_index)
    return unless header
    draw_text(x, y, width, line_height, header[:realtime_s], align)
  end
  #--------------------------------------------------------------------------
  # ○ Updating the cursor
  #--------------------------------------------------------------------------
  def update_cursor
    if @selected
      cursor_rect.set(164, 0, @name_width + 8, line_height)
    else
      cursor_rect.empty
    end
  end  
end

#==============================================================================
# ■ Scene_File
#==============================================================================
class Scene_File < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ○ Start processing
  #--------------------------------------------------------------------------
  def start
    super
    DataManager.make_thumbnail
    create_help_window
    create_savefile_viewport
    create_savefile_windows
    init_selection
  end
  #--------------------------------------------------------------------------
  # ○ Termination processing
  #--------------------------------------------------------------------------
  def terminate
    super
    @savefile_viewport.dispose
    @savefile_windows.each {|window| window.dispose }
    DataManager.dispose_thumbnail
  end  
  #--------------------------------------------------------------------------
  # ○ Obtain the number of save files to display in the screen
  #--------------------------------------------------------------------------
  def visible_max
    return 3
  end  
  #--------------------------------------------------------------------------
  # ○ save file [decided]
  #--------------------------------------------------------------------------
  def on_savefile_ok
    DataManager.change_thumbnail(index)
  end
end

#==============================================================================
# ◆ Exit
#==============================================================================
module Exit
  # ---------------------------------------------------------------------------
  # ◆ Describe the customization point setup process.
  # ---------------------------------------------------------------------------
  def self.setup
    DataManager.load_database
    DataManager.setup_system
  end
  # ---------------------------------------------------------------------------
  # ◆ Write customization point release processing.
  # ---------------------------------------------------------------------------
  def self.dispose
    DataManager.save_system
  end
end






















