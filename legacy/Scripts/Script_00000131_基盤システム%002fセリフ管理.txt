=begin
=基盤システム/セリフ管理




==更新履歴
  Date     Version Author Comment
==17/09/21 2.2.0   ひまわり　統合1
=end

#==============================================================================
# ■ CutIn
#==============================================================================
class CutIn
	#--------------------------------------------------------------------------
	# ● オブジェクト初期化
	#--------------------------------------------------------------------------
	def initialize(type, pic_name, se_name = nil)
		@type     = type
		@pic_name = pic_name
		@se = RPG::SE.new(se_name) if se_name
	end
	#--------------------------------------------------------------------------
	# ● ウェイト
	#--------------------------------------------------------------------------
	def wait(duration)
		@wait_method.call(duration) if @wait_method
	end
	#--------------------------------------------------------------------------
	# ● 効果音の実行
	#--------------------------------------------------------------------------
	def se_play
		@se.play if @se
	end
	#--------------------------------------------------------------------------
	# ● 画面系コマンドの対象を取得
	#--------------------------------------------------------------------------
	def screen
		if $game_party.in_battle
			return $game_troop.screen
		elsif $game_party.in_novel
			return $game_novel.screen
		else
			return $game_map.screen
		end
	end
	#--------------------------------------------------------------------------
	# ● 表示
	#--------------------------------------------------------------------------
	def show(num, x, y, ori = 0, zx = 100, zy = 100, op = 255, bl = 0)
		screen.pictures[num].show(@pic_name, ori, x, y, zx, zy, op, bl)
	end
	#--------------------------------------------------------------------------
	# ● 移動
	#--------------------------------------------------------------------------
	def move(num, x, y, dur, ori = 0, zx = 100, zy = 100, op = 255, bl = 0, wait = false)
		screen.pictures[num].move(ori, x, y, zx, zy, op, bl, dur)
		wait(dur) if wait
	end
	#--------------------------------------------------------------------------
	# ● 回転
	#--------------------------------------------------------------------------
	def rotate(num, spd)
		screen.pictures[num].rotate(spd)
	end
	#--------------------------------------------------------------------------
	# ● 色調変更
	#--------------------------------------------------------------------------
	def tone_change(num, tone, dur, wait = false)
		screen.pictures[num].start_tone_change(tone, dur)
		wait(dur) if wait
	end
	#--------------------------------------------------------------------------
	# ● 消去
	#--------------------------------------------------------------------------
	def erase(num)
		screen.pictures[num].erase
	end  
	#--------------------------------------------------------------------------
	# ● 実行
	#--------------------------------------------------------------------------
	def execute(wait_method)
		@wait_method = wait_method
		send("execute_#{@type}".to_sym)
	end
	#--------------------------------------------------------------------------
	# ● 実行（基本）
	#--------------------------------------------------------------------------
	def execute_basic
		se_play
		show(20, 0, 0, 0, 100, 100, 0)
		move(20, 0, 0, 15, 0, 100, 100, 255, 0, true)
		wait(30)
		move(20, 0, 0, 15, 0, 100, 100, 0, 0, true)
		erase(20)
	end  
	#--------------------------------------------------------------------------
	# ● 実行（スライド）
	#--------------------------------------------------------------------------
	def execute_slide
		se_play
		show(20, Graphics.width / 10, 0, 0, 100, 100, 0)
		move(20, 0, 0, 15, 0, 100, 100, 255, 0, true)
		wait(30)
		move(20, Graphics.width / 10, 0, 15, 0, 100, 100, 0, 0, true)
		erase(20)
	end  
	#--------------------------------------------------------------------------
	# ● 実行（フォーカス）
	#--------------------------------------------------------------------------
	def execute_focus
		se_play
		show(20, 0, 0, 0, 110, 110, 64, 0)
		show(19, 0, 0, 0, 120, 120, 32, 0)
		show(18, 0, 0, 0, 130, 130, 0, 0)
		move(20, 0, 0, 15, 0, 100, 100, 0, 0, false)
		move(19, 0, 0, 15, 0, 100, 100, 0, 0, false)
		move(18, 0, 0, 15, 0, 100, 100, 255, 0, true)
		wait(30)
		move(20, 0, 0, 15, 0, 110, 110, 64, 0, false)
		move(19, 0, 0, 15, 0, 120, 120, 32, 0, false)
		move(18, 0, 0, 15, 0, 130, 130, 0, 0, true)    
		erase(20)
		erase(19)
		erase(18)
	end  
	#--------------------------------------------------------------------------
	# ● 実行（ロング）
	#--------------------------------------------------------------------------
	def execute_long
		se_play
		show(20, 0, 0, 0, 100, 100, 0, 0)
		move(20, 0, 0, 15, 0, 100, 100, 255, 0, true)
		wait(30)
	end  
end

#==============================================================================
# ■ Word
#==============================================================================
class Word
	#--------------------------------------------------------------------------
	# ● オブジェクト初期化
	#--------------------------------------------------------------------------
	def initialize(word_data, face_name, face_index)
		@words = word_data.split("\\n")
		@face_name = face_name
		@face_index = face_index
	end
	#--------------------------------------------------------------------------
	# ● 実行
	#--------------------------------------------------------------------------
	def execute
		$game_message.face_name = @face_name
		$game_message.face_index = @face_index
		$game_message.background = 0
		$game_message.position = 2
		@words.each{|line| $game_message.add(line)}    
	end  
end

#==============================================================================
# ■ Game_Battler
#==============================================================================
class Game_Battler < Game_BattlerBase
	#--------------------------------------------------------------------------
	# ● スキルセリフデータ格納ハッシュの取得
	#--------------------------------------------------------------------------  
	def skill_word_hash
		if actor? 
			data = NWConst::Actor::SKILL_WORDS
			return data.key?(self.id) ? data[self.id] : nil
		else
			data = NWConst::Enemy::SKILL_WORDS
			id = $data_enemies[self.id].ex_dungeon_enemy? ? self.id-1000 : self.id 
			return data.key?(id) ? data[id] : nil
		end
	end
	#--------------------------------------------------------------------------
	# ● ダウンセリフデータ格納ハッシュの取得
	#--------------------------------------------------------------------------  
	def down_word_hash
		if actor? 
			data = NWConst::Actor::DOWN_WORDS
			return data.key?(self.id) ? data[self.id] : nil
		else
			data = NWConst::Enemy::DOWN_WORDS
			id = $data_enemies[self.id].ex_dungeon_enemy? ? self.id-1000 : self.id 
			return data.key?(id) ? data[id] : nil
		end
	end
	#--------------------------------------------------------------------------
	# ● スキルセリフが存在する？
	#--------------------------------------------------------------------------  
	def exist_skill_word?(skill_id)
		return false unless skill_word_hash
		return skill_word_hash.keys.any?{|key| key.include?(skill_id)}
	end
	#--------------------------------------------------------------------------
	# ● スキルワーズの取得
	#--------------------------------------------------------------------------  
	def skill_words(skill_id)
		skey = skill_word_hash.keys.select{|skey| skey.include?(skill_id)}.last
		return skill_word_hash[skey]
	end
	#--------------------------------------------------------------------------
	# ● カットインが存在する？
	#--------------------------------------------------------------------------  
	def exist_cutin?(skill_id)
		skill_words(skill_id).key?(:ct_type)
	end
	#--------------------------------------------------------------------------
	# ● スキルセリフの取得
	#--------------------------------------------------------------------------  
	def skill_word(skill_id)
		(1..10).collect{|i| "word_#{i}".to_sym}.collect{|key|
			skill_words(skill_id)[key]
		}.compact.collect{|w|
			Word.new(w[0], w[1], w[2])
		}.sample
	end
	#--------------------------------------------------------------------------
	# ● カットインの取得
	#--------------------------------------------------------------------------  
	def cutin(skill_id)
		data = skill_words(skill_id)
		return CutIn.new(data[:ct_type], data[:ct_pic], data[:ct_se])
	end
	#--------------------------------------------------------------------------
	# ● ダウンセリフデータ格納ハッシュの取得
	#--------------------------------------------------------------------------  
	def down_word_hash
		data = actor? ? NWConst::Actor::DOWN_WORDS : NWConst::Enemy::DOWN_WORDS
		return data.key?(self.id) ? data[self.id] : nil
	end
	#--------------------------------------------------------------------------
	# ● 通常死亡セリフの取得
	#--------------------------------------------------------------------------  
	def dead_word
		w = down_word_hash[:dead_word]
		return w ? Word.new(w[0], w[1], w[2]) : nil
	end
	#--------------------------------------------------------------------------
	# ● 快楽死亡セリフの取得
	#--------------------------------------------------------------------------  
	def orgasm_word
		w = down_word_hash[:orgasm_word]
		return w ? Word.new(w[0], w[1], w[2]) : nil
	end
	#--------------------------------------------------------------------------
	# ● 捕食死亡セリフの取得
	#--------------------------------------------------------------------------  
	def predation_word
		w = down_word_hash[:predation_word]
		return w ? Word.new(w[0], w[1], w[2]) : nil
	end
	#--------------------------------------------------------------------------
	# ● 失禁セリフの取得
	#--------------------------------------------------------------------------  
	def incontinence_word
		w = down_word_hash[:incontinence_word]
		return w ? Word.new(w[0], w[1], w[2]) : nil
	end
	#--------------------------------------------------------------------------
	# ● 死亡前グラフィックの変更
	#--------------------------------------------------------------------------  
	def premortal_change
		return unless enemy? && down_word_hash.key?(:premortal_graphic)
		@battler_name = down_word_hash[:premortal_graphic]
	end
end








